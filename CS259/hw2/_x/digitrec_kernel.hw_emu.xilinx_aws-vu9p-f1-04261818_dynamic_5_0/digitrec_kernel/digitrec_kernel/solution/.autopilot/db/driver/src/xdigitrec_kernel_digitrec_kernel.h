// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2_AR71275_op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDIGITREC_KERNEL_DIGITREC_KERNEL_H
#define XDIGITREC_KERNEL_DIGITREC_KERNEL_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdigitrec_kernel_digitrec_kernel_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XDigitrec_kernel_digitrec_kernel_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XDigitrec_kernel_digitrec_kernel;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDigitrec_kernel_digitrec_kernel_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDigitrec_kernel_digitrec_kernel_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDigitrec_kernel_digitrec_kernel_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDigitrec_kernel_digitrec_kernel_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDigitrec_kernel_digitrec_kernel_Initialize(XDigitrec_kernel_digitrec_kernel *InstancePtr, u16 DeviceId);
XDigitrec_kernel_digitrec_kernel_Config* XDigitrec_kernel_digitrec_kernel_LookupConfig(u16 DeviceId);
int XDigitrec_kernel_digitrec_kernel_CfgInitialize(XDigitrec_kernel_digitrec_kernel *InstancePtr, XDigitrec_kernel_digitrec_kernel_Config *ConfigPtr);
#else
int XDigitrec_kernel_digitrec_kernel_Initialize(XDigitrec_kernel_digitrec_kernel *InstancePtr, const char* InstanceName);
int XDigitrec_kernel_digitrec_kernel_Release(XDigitrec_kernel_digitrec_kernel *InstancePtr);
#endif

void XDigitrec_kernel_digitrec_kernel_Start(XDigitrec_kernel_digitrec_kernel *InstancePtr);
u32 XDigitrec_kernel_digitrec_kernel_IsDone(XDigitrec_kernel_digitrec_kernel *InstancePtr);
u32 XDigitrec_kernel_digitrec_kernel_IsIdle(XDigitrec_kernel_digitrec_kernel *InstancePtr);
u32 XDigitrec_kernel_digitrec_kernel_IsReady(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_EnableAutoRestart(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_DisableAutoRestart(XDigitrec_kernel_digitrec_kernel *InstancePtr);

void XDigitrec_kernel_digitrec_kernel_Set_test_image(XDigitrec_kernel_digitrec_kernel *InstancePtr, u64 Data);
u64 XDigitrec_kernel_digitrec_kernel_Get_test_image(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_Set_train_images(XDigitrec_kernel_digitrec_kernel *InstancePtr, u64 Data);
u64 XDigitrec_kernel_digitrec_kernel_Get_train_images(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_Set_knn_mat(XDigitrec_kernel_digitrec_kernel *InstancePtr, u64 Data);
u64 XDigitrec_kernel_digitrec_kernel_Get_knn_mat(XDigitrec_kernel_digitrec_kernel *InstancePtr);

void XDigitrec_kernel_digitrec_kernel_InterruptGlobalEnable(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_InterruptGlobalDisable(XDigitrec_kernel_digitrec_kernel *InstancePtr);
void XDigitrec_kernel_digitrec_kernel_InterruptEnable(XDigitrec_kernel_digitrec_kernel *InstancePtr, u32 Mask);
void XDigitrec_kernel_digitrec_kernel_InterruptDisable(XDigitrec_kernel_digitrec_kernel *InstancePtr, u32 Mask);
void XDigitrec_kernel_digitrec_kernel_InterruptClear(XDigitrec_kernel_digitrec_kernel *InstancePtr, u32 Mask);
u32 XDigitrec_kernel_digitrec_kernel_InterruptGetEnabled(XDigitrec_kernel_digitrec_kernel *InstancePtr);
u32 XDigitrec_kernel_digitrec_kernel_InterruptGetStatus(XDigitrec_kernel_digitrec_kernel *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
