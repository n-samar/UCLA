// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2_AR71275_op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="digitrec_kernel_digitrec_kernel,hls_ip_2018_2_AR71275_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=414077,HLS_SYN_TPT=none,HLS_SYN_MEM=75,HLS_SYN_DSP=3,HLS_SYN_FF=2889,HLS_SYN_LUT=4275,HLS_VERSION=2018_2_AR71275_op}" *)

module digitrec_kernel_digitrec_kernel (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_pp0_stage0 = 35'd2;
parameter    ap_ST_fsm_state18 = 35'd4;
parameter    ap_ST_fsm_state19 = 35'd8;
parameter    ap_ST_fsm_state20 = 35'd16;
parameter    ap_ST_fsm_state21 = 35'd32;
parameter    ap_ST_fsm_state22 = 35'd64;
parameter    ap_ST_fsm_state23 = 35'd128;
parameter    ap_ST_fsm_state24 = 35'd256;
parameter    ap_ST_fsm_pp1_stage0 = 35'd512;
parameter    ap_ST_fsm_state28 = 35'd1024;
parameter    ap_ST_fsm_pp2_stage0 = 35'd2048;
parameter    ap_ST_fsm_state34 = 35'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 35'd8192;
parameter    ap_ST_fsm_pp3_stage1 = 35'd16384;
parameter    ap_ST_fsm_pp3_stage2 = 35'd32768;
parameter    ap_ST_fsm_pp3_stage3 = 35'd65536;
parameter    ap_ST_fsm_pp3_stage4 = 35'd131072;
parameter    ap_ST_fsm_pp3_stage5 = 35'd262144;
parameter    ap_ST_fsm_pp3_stage6 = 35'd524288;
parameter    ap_ST_fsm_pp3_stage7 = 35'd1048576;
parameter    ap_ST_fsm_pp3_stage8 = 35'd2097152;
parameter    ap_ST_fsm_pp3_stage9 = 35'd4194304;
parameter    ap_ST_fsm_pp3_stage10 = 35'd8388608;
parameter    ap_ST_fsm_pp3_stage11 = 35'd16777216;
parameter    ap_ST_fsm_pp3_stage12 = 35'd33554432;
parameter    ap_ST_fsm_pp3_stage13 = 35'd67108864;
parameter    ap_ST_fsm_pp3_stage14 = 35'd134217728;
parameter    ap_ST_fsm_pp3_stage15 = 35'd268435456;
parameter    ap_ST_fsm_pp3_stage16 = 35'd536870912;
parameter    ap_ST_fsm_pp3_stage17 = 35'd1073741824;
parameter    ap_ST_fsm_pp3_stage18 = 35'd2147483648;
parameter    ap_ST_fsm_pp3_stage19 = 35'd4294967296;
parameter    ap_ST_fsm_pp3_stage20 = 35'd8589934592;
parameter    ap_ST_fsm_state72 = 35'd17179869184;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] test_image;
wire   [63:0] train_images;
wire   [63:0] knn_mat;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state18;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten1_reg_2111;
reg    gmem2_blk_n_AW;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_4_reg_2103;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] exitcond_flatten_reg_2077;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter9_reg;
reg    gmem2_blk_n_B;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] tmp_15_reg_2107;
reg   [0:0] tmp_15_reg_2107_pp0_iter14_reg;
reg    gmem2_blk_n_AR;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage1;
reg   [0:0] exitcond_flatten3_reg_2202;
reg    gmem2_blk_n_R;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_pp3_stage8;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_pp3_stage2;
wire    ap_CS_fsm_pp3_stage9;
wire    ap_block_pp3_stage9;
wire    ap_CS_fsm_pp3_stage11;
wire    ap_block_pp3_stage11;
wire    ap_CS_fsm_pp3_stage18;
wire    ap_block_pp3_stage18;
wire    ap_CS_fsm_pp3_stage12;
wire    ap_block_pp3_stage12;
wire    ap_CS_fsm_pp3_stage19;
wire    ap_block_pp3_stage19;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] tmp_13_reg_2315;
wire    ap_CS_fsm_pp3_stage10;
wire    ap_block_pp3_stage10;
wire    ap_CS_fsm_pp3_stage15;
wire    ap_block_pp3_stage15;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_pp3_stage7;
wire    ap_block_pp3_stage7;
reg   [0:0] exitcond_flatten3_reg_2202_pp3_iter1_reg;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [63:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [63:0] gmem2_AWADDR;
reg   [31:0] gmem2_AWLEN;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [7:0] gmem2_WDATA;
reg    gmem2_ARVALID;
wire    gmem2_ARREADY;
reg   [63:0] gmem2_ARADDR;
wire    gmem2_RVALID;
reg    gmem2_RREADY;
wire   [7:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [4:0] indvar_flatten_reg_367;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_sig_ioackin_gmem2_AWREADY;
reg    ap_block_state11_io;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_sig_ioackin_gmem2_WREADY;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
reg    ap_block_state17_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] x_reg_379;
reg   [1:0] y_reg_390;
reg   [14:0] indvar_flatten1_reg_401;
reg   [3:0] x1_reg_412;
reg   [10:0] y1_reg_423;
reg   [14:0] indvar_flatten2_reg_434;
reg   [3:0] x2_reg_445;
reg   [10:0] y2_reg_456;
reg   [14:0] indvar_flatten3_reg_467;
reg   [3:0] x3_reg_478;
reg   [10:0] y3_reg_489;
reg   [63:0] knn_mat_read_reg_2056;
reg   [63:0] test_image_read_reg_2066;
reg   [63:0] gmem_addr_reg_2071;
wire   [0:0] exitcond_flatten_fu_542_p2;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_reg_2077_pp0_iter8_reg;
wire   [4:0] indvar_flatten_next_fu_548_p2;
reg   [4:0] indvar_flatten_next_reg_2081;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] x_mid2_fu_604_p3;
reg   [63:0] gmem2_addr_reg_2092;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter1_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter2_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter3_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter4_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter5_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter6_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter7_reg;
reg   [63:0] gmem2_addr_reg_2092_pp0_iter8_reg;
wire   [1:0] y_1_fu_635_p3;
wire   [0:0] tmp_4_fu_648_p2;
wire   [0:0] tmp_15_fu_654_p2;
reg   [0:0] tmp_15_reg_2107_pp0_iter10_reg;
reg   [0:0] tmp_15_reg_2107_pp0_iter11_reg;
reg   [0:0] tmp_15_reg_2107_pp0_iter12_reg;
reg   [0:0] tmp_15_reg_2107_pp0_iter13_reg;
wire   [0:0] exitcond_flatten1_fu_660_p2;
wire    ap_block_state25_pp1_stage0_iter0;
reg    ap_block_state26_pp1_stage0_iter1;
wire    ap_block_state27_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_flatten1_reg_2111_pp1_iter1_reg;
wire   [14:0] indvar_flatten_next1_fu_666_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [10:0] y1_mid2_fu_678_p3;
reg   [10:0] y1_mid2_reg_2120;
wire   [3:0] tmp_1_mid2_v_v_fu_692_p3;
reg   [3:0] tmp_1_mid2_v_v_reg_2125;
wire   [10:0] y1_1_fu_700_p2;
wire   [14:0] grp_fu_2032_p3;
reg   [14:0] tmp_8_reg_2136;
reg   [63:0] gmem_addr_read_reg_2141;
wire   [0:0] exitcond_flatten2_fu_721_p2;
reg   [0:0] exitcond_flatten2_reg_2146;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state29_pp2_stage0_iter0;
wire    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state31_pp2_stage0_iter2;
wire    ap_block_state32_pp2_stage0_iter3;
wire    ap_block_state33_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_flatten2_reg_2146_pp2_iter1_reg;
reg   [0:0] exitcond_flatten2_reg_2146_pp2_iter2_reg;
reg   [0:0] exitcond_flatten2_reg_2146_pp2_iter3_reg;
wire   [14:0] indvar_flatten_next2_fu_727_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [10:0] y2_mid2_fu_739_p3;
reg   [10:0] y2_mid2_reg_2155;
wire   [3:0] tmp_6_mid2_v_v_fu_753_p3;
reg   [3:0] tmp_6_mid2_v_v_reg_2160;
wire   [10:0] y2_1_fu_761_p2;
wire   [14:0] grp_fu_2040_p3;
reg   [14:0] tmp_5_reg_2171;
reg    ap_enable_reg_pp2_iter1;
reg   [14:0] temp_addr_1_reg_2176;
reg   [14:0] temp_addr_1_reg_2176_pp2_iter3_reg;
wire   [3:0] tmp2_fu_1445_p2;
reg   [3:0] tmp2_reg_2182;
wire   [3:0] tmp13_fu_1535_p2;
reg   [3:0] tmp13_reg_2187;
wire   [3:0] tmp25_fu_1625_p2;
reg   [3:0] tmp25_reg_2192;
wire   [3:0] tmp36_fu_1725_p2;
reg   [3:0] tmp36_reg_2197;
wire   [0:0] exitcond_flatten3_fu_1796_p2;
wire    ap_block_state35_pp3_stage0_iter0;
wire    ap_block_state56_pp3_stage0_iter1;
reg    ap_sig_ioackin_gmem2_ARREADY;
reg    ap_block_state56_io;
reg    ap_block_pp3_stage0_11001;
wire   [14:0] indvar_flatten_next3_fu_1802_p2;
reg   [14:0] indvar_flatten_next3_reg_2206;
wire   [10:0] y3_mid2_fu_1814_p3;
reg   [10:0] y3_mid2_reg_2211;
reg   [10:0] y3_mid2_reg_2211_pp3_iter1_reg;
wire  signed [6:0] tmp_5_mid2_v_v_fu_1850_p3;
reg  signed [6:0] tmp_5_mid2_v_v_reg_2217;
wire  signed [31:0] tmp_5_mid2_v_fu_1858_p1;
reg  signed [31:0] tmp_5_mid2_v_reg_2223;
wire   [3:0] tmp_7_mid2_v_v_fu_1866_p3;
reg   [3:0] tmp_7_mid2_v_v_reg_2228;
reg   [3:0] tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg;
reg   [63:0] gmem2_addr_1_reg_2234;
reg   [63:0] gmem2_addr_2_reg_2240;
wire    ap_block_state36_pp3_stage1_iter0;
reg    ap_block_state36_io;
wire    ap_block_state57_pp3_stage1_iter1;
reg    ap_block_pp3_stage1_11001;
reg   [7:0] gmem2_addr_1_read_reg_2246;
reg    ap_block_state43_pp3_stage8_iter0;
wire    ap_block_state64_pp3_stage8_iter1;
reg    ap_block_pp3_stage8_11001;
reg   [7:0] gmem2_addr_2_read_reg_2251;
reg    ap_block_state44_pp3_stage9_iter0;
wire    ap_block_state65_pp3_stage9_iter1;
reg    ap_block_state65_io;
reg    ap_block_pp3_stage9_11001;
wire   [32:0] tmp_5_cast_mid2_fu_1909_p1;
reg   [32:0] tmp_5_cast_mid2_reg_2256;
wire    ap_block_state45_pp3_stage10_iter0;
wire    ap_block_state66_pp3_stage10_iter1;
reg    ap_block_state66_io;
reg    ap_block_pp3_stage10_11001;
wire   [0:0] tmp_24_1_fu_1912_p2;
reg   [0:0] tmp_24_1_reg_2261;
reg   [63:0] gmem2_addr_3_reg_2266;
reg   [63:0] gmem2_addr_4_reg_2272;
wire    ap_block_state46_pp3_stage11_iter0;
reg    ap_block_state46_io;
wire    ap_block_state67_pp3_stage11_iter1;
reg    ap_block_pp3_stage11_11001;
reg   [7:0] gmem2_addr_3_read_reg_2278;
reg    ap_block_state53_pp3_stage18_iter0;
reg    ap_block_pp3_stage18_11001;
reg   [7:0] gmem2_addr_4_read_reg_2283;
reg    ap_block_state54_pp3_stage19_iter0;
reg    ap_block_pp3_stage19_11001;
reg   [63:0] gmem2_addr_5_reg_2288;
wire    ap_CS_fsm_pp3_stage20;
wire    ap_block_state55_pp3_stage20_iter0;
wire    ap_block_pp3_stage20_11001;
wire   [10:0] y3_1_fu_2004_p2;
reg   [10:0] y3_1_reg_2295;
wire   [14:0] grp_fu_2048_p3;
reg   [14:0] tmp_7_reg_2300;
wire    ap_CS_fsm_pp3_stage6;
wire    ap_block_state41_pp3_stage6_iter0;
wire    ap_block_state62_pp3_stage6_iter1;
wire    ap_block_pp3_stage6_11001;
wire    ap_block_state42_pp3_stage7_iter0;
reg    ap_block_state63_pp3_stage7_iter1;
reg    ap_block_pp3_stage7_11001;
reg   [7:0] gmem2_addr_5_read_reg_2310;
wire   [0:0] tmp_13_fu_2022_p2;
wire   [7:0] tmp_65_fu_2028_p1;
reg   [7:0] tmp_65_reg_2319;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
wire    ap_CS_fsm_state24;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state28;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
wire    ap_CS_fsm_state34;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state35;
wire    ap_block_pp3_stage20_subdone;
wire    ap_block_state50_pp3_stage15_iter0;
reg    ap_block_state71_pp3_stage15_iter1;
reg    ap_block_pp3_stage15_subdone;
reg   [14:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [63:0] temp_d0;
wire   [63:0] temp_q0;
reg   [14:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
wire   [63:0] temp_d1;
wire   [63:0] temp_q1;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_371_p4;
reg   [3:0] ap_phi_mux_x1_phi_fu_416_p4;
reg   [3:0] ap_phi_mux_x2_phi_fu_449_p4;
wire    ap_block_pp2_stage0;
reg   [14:0] ap_phi_mux_indvar_flatten3_phi_fu_471_p4;
reg   [3:0] ap_phi_mux_x3_phi_fu_482_p4;
reg   [10:0] ap_phi_mux_y3_phi_fu_493_p4;
wire   [63:0] tmp_9_fu_712_p1;
wire   [63:0] tmp_6_fu_773_p1;
wire   [63:0] tmp_10_fu_2015_p1;
wire   [63:0] tmp_1_fu_510_p1;
wire   [63:0] knn_mat4_sum5_fu_612_p2;
wire   [63:0] knn_mat4_sum6_fu_1874_p2;
wire   [63:0] knn_mat4_sum7_fu_1898_p2;
wire   [63:0] knn_mat4_sum8_fu_1930_p2;
wire   [63:0] knn_mat4_sum9_fu_1954_p2;
wire   [63:0] knn_mat4_sum1_fu_1993_p2;
wire    ap_block_pp3_stage20;
reg    ap_reg_ioackin_gmem2_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_gmem2_WREADY;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem2_ARREADY;
wire    ap_block_pp3_stage1_01001;
wire    ap_block_state37_pp3_stage2_iter0;
wire    ap_block_state58_pp3_stage2_iter1;
wire    ap_block_pp3_stage2_01001;
reg    ap_block_state37_io;
reg    ap_block_pp3_stage2_11001;
wire    ap_block_pp3_stage11_01001;
wire    ap_block_state47_pp3_stage12_iter0;
wire    ap_block_state68_pp3_stage12_iter1;
wire    ap_block_pp3_stage12_01001;
reg    ap_block_state47_io;
reg    ap_block_pp3_stage12_11001;
wire    ap_block_pp3_stage0_01001;
reg    ap_block_pp3_stage9_01001;
reg    ap_block_pp3_stage15_11001;
wire    ap_block_pp3_stage10_01001;
wire   [60:0] train_images1_fu_500_p4;
wire   [5:0] p_shl_fu_524_p3;
wire   [6:0] p_shl_cast_fu_532_p1;
wire   [6:0] x_cast_fu_520_p1;
wire   [3:0] x_s_fu_560_p2;
wire   [5:0] p_shl_mid1_fu_570_p3;
wire   [6:0] p_shl_cast_mid1_fu_578_p1;
wire   [6:0] x_cast_mid1_fu_566_p1;
wire   [0:0] exitcond_fu_554_p2;
wire   [6:0] tmp_mid1_fu_582_p2;
wire   [6:0] tmp_fu_536_p2;
wire   [6:0] tmp_mid2_fu_588_p3;
wire  signed [31:0] tmp_30_mid2_v_fu_596_p1;
wire   [63:0] tmp_30_mid2_fu_600_p1;
wire   [2:0] grp_fu_623_p1;
wire   [1:0] y_op_fu_629_p2;
wire   [2:0] grp_fu_643_p1;
wire   [4:0] grp_fu_623_p2;
wire   [4:0] grp_fu_643_p2;
wire   [0:0] exitcond1_fu_672_p2;
wire   [3:0] x1_s_fu_686_p2;
wire   [0:0] exitcond2_fu_733_p2;
wire   [3:0] x2_s_fu_747_p2;
wire   [0:0] tmp_16_fu_777_p1;
wire   [0:0] tmp_17_fu_785_p3;
wire   [0:0] tmp_18_fu_797_p3;
wire   [0:0] tmp_19_fu_809_p3;
wire   [0:0] tmp_20_fu_821_p3;
wire   [0:0] tmp_21_fu_833_p3;
wire   [0:0] tmp_22_fu_845_p3;
wire   [0:0] tmp_23_fu_857_p3;
wire   [0:0] tmp_24_fu_869_p3;
wire   [0:0] tmp_25_fu_881_p3;
wire   [0:0] tmp_26_fu_893_p3;
wire   [0:0] tmp_27_fu_905_p3;
wire   [0:0] tmp_28_fu_917_p3;
wire   [0:0] tmp_29_fu_929_p3;
wire   [0:0] tmp_30_fu_941_p3;
wire   [0:0] tmp_31_fu_953_p3;
wire   [0:0] tmp_32_fu_965_p3;
wire   [0:0] tmp_33_fu_977_p3;
wire   [0:0] tmp_34_fu_989_p3;
wire   [0:0] tmp_35_fu_1001_p3;
wire   [0:0] tmp_36_fu_1013_p3;
wire   [0:0] tmp_37_fu_1025_p3;
wire   [0:0] tmp_38_fu_1037_p3;
wire   [0:0] tmp_39_fu_1049_p3;
wire   [0:0] tmp_40_fu_1061_p3;
wire   [0:0] tmp_41_fu_1073_p3;
wire   [0:0] tmp_42_fu_1085_p3;
wire   [0:0] tmp_43_fu_1097_p3;
wire   [0:0] tmp_44_fu_1109_p3;
wire   [0:0] tmp_45_fu_1121_p3;
wire   [0:0] tmp_46_fu_1133_p3;
wire   [0:0] tmp_47_fu_1145_p3;
wire   [0:0] tmp_48_fu_1157_p3;
wire   [0:0] tmp_49_fu_1169_p3;
wire   [0:0] tmp_50_fu_1181_p3;
wire   [0:0] tmp_51_fu_1193_p3;
wire   [0:0] tmp_52_fu_1205_p3;
wire   [0:0] tmp_53_fu_1217_p3;
wire   [0:0] tmp_54_fu_1229_p3;
wire   [0:0] tmp_55_fu_1241_p3;
wire   [0:0] tmp_56_fu_1253_p3;
wire   [0:0] tmp_57_fu_1265_p3;
wire   [0:0] tmp_58_fu_1277_p3;
wire   [0:0] tmp_59_fu_1289_p3;
wire   [0:0] tmp_60_fu_1301_p3;
wire   [0:0] tmp_61_fu_1313_p3;
wire   [0:0] tmp_62_fu_1325_p3;
wire   [0:0] tmp_63_fu_1337_p3;
wire   [0:0] tmp_64_fu_1349_p3;
wire   [1:0] tmp_22_cast_fu_781_p1;
wire   [1:0] tmp_15_2_cast_fu_805_p1;
wire   [1:0] tmp5_fu_1361_p2;
wire   [1:0] tmp_15_1_cast_fu_793_p1;
wire   [1:0] tmp4_fu_1367_p2;
wire   [1:0] tmp_15_4_cast_fu_829_p1;
wire   [1:0] tmp_15_5_cast_fu_841_p1;
wire   [1:0] tmp7_fu_1377_p2;
wire   [1:0] tmp_15_3_cast_fu_817_p1;
wire   [1:0] tmp6_fu_1383_p2;
wire   [2:0] tmp6_cast_fu_1389_p1;
wire   [2:0] tmp4_cast_fu_1373_p1;
wire   [2:0] tmp3_fu_1393_p2;
wire   [1:0] tmp_15_7_cast_fu_865_p1;
wire   [1:0] tmp_15_8_cast_fu_877_p1;
wire   [1:0] tmp10_fu_1403_p2;
wire   [1:0] tmp_15_6_cast_fu_853_p1;
wire   [1:0] tmp9_fu_1409_p2;
wire   [1:0] tmp_15_cast_fu_901_p1;
wire   [1:0] tmp_15_10_cast_fu_913_p1;
wire   [1:0] tmp12_fu_1419_p2;
wire   [1:0] tmp_15_9_cast_fu_889_p1;
wire   [1:0] tmp11_fu_1425_p2;
wire   [2:0] tmp11_cast_fu_1431_p1;
wire   [2:0] tmp9_cast_fu_1415_p1;
wire   [2:0] tmp8_fu_1435_p2;
wire   [3:0] tmp8_cast_fu_1441_p1;
wire   [3:0] tmp3_cast_fu_1399_p1;
wire   [1:0] tmp_15_12_cast_fu_937_p1;
wire   [1:0] tmp_15_13_cast_fu_949_p1;
wire   [1:0] tmp16_fu_1451_p2;
wire   [1:0] tmp_15_11_cast_fu_925_p1;
wire   [1:0] tmp15_fu_1457_p2;
wire   [1:0] tmp_15_15_cast_fu_973_p1;
wire   [1:0] tmp_15_16_cast_fu_985_p1;
wire   [1:0] tmp18_fu_1467_p2;
wire   [1:0] tmp_15_14_cast_fu_961_p1;
wire   [1:0] tmp17_fu_1473_p2;
wire   [2:0] tmp17_cast_fu_1479_p1;
wire   [2:0] tmp15_cast_fu_1463_p1;
wire   [2:0] tmp14_fu_1483_p2;
wire   [1:0] tmp_15_18_cast_fu_1009_p1;
wire   [1:0] tmp_15_19_cast_fu_1021_p1;
wire   [1:0] tmp21_fu_1493_p2;
wire   [1:0] tmp_15_17_cast_fu_997_p1;
wire   [1:0] tmp20_fu_1499_p2;
wire   [1:0] tmp_15_21_cast_fu_1045_p1;
wire   [1:0] tmp_15_22_cast_fu_1057_p1;
wire   [1:0] tmp23_fu_1509_p2;
wire   [1:0] tmp_15_20_cast_fu_1033_p1;
wire   [1:0] tmp22_fu_1515_p2;
wire   [2:0] tmp22_cast_fu_1521_p1;
wire   [2:0] tmp20_cast_fu_1505_p1;
wire   [2:0] tmp19_fu_1525_p2;
wire   [3:0] tmp19_cast_fu_1531_p1;
wire   [3:0] tmp14_cast_fu_1489_p1;
wire   [1:0] tmp_15_24_cast_fu_1081_p1;
wire   [1:0] tmp_15_25_cast_fu_1093_p1;
wire   [1:0] tmp28_fu_1541_p2;
wire   [1:0] tmp_15_23_cast_fu_1069_p1;
wire   [1:0] tmp27_fu_1547_p2;
wire   [1:0] tmp_15_27_cast_fu_1117_p1;
wire   [1:0] tmp_15_28_cast_fu_1129_p1;
wire   [1:0] tmp30_fu_1557_p2;
wire   [1:0] tmp_15_26_cast_fu_1105_p1;
wire   [1:0] tmp29_fu_1563_p2;
wire   [2:0] tmp29_cast_fu_1569_p1;
wire   [2:0] tmp27_cast_fu_1553_p1;
wire   [2:0] tmp26_fu_1573_p2;
wire   [1:0] tmp_15_30_cast_fu_1153_p1;
wire   [1:0] tmp_15_31_cast_fu_1165_p1;
wire   [1:0] tmp33_fu_1583_p2;
wire   [1:0] tmp_15_29_cast_fu_1141_p1;
wire   [1:0] tmp32_fu_1589_p2;
wire   [1:0] tmp_15_33_cast_fu_1189_p1;
wire   [1:0] tmp_15_34_cast_fu_1201_p1;
wire   [1:0] tmp35_fu_1599_p2;
wire   [1:0] tmp_15_32_cast_fu_1177_p1;
wire   [1:0] tmp34_fu_1605_p2;
wire   [2:0] tmp34_cast_fu_1611_p1;
wire   [2:0] tmp32_cast_fu_1595_p1;
wire   [2:0] tmp31_fu_1615_p2;
wire   [3:0] tmp31_cast_fu_1621_p1;
wire   [3:0] tmp26_cast_fu_1579_p1;
wire   [1:0] tmp_15_36_cast_fu_1225_p1;
wire   [1:0] tmp_15_37_cast_fu_1237_p1;
wire   [1:0] tmp39_fu_1631_p2;
wire   [1:0] tmp_15_35_cast_fu_1213_p1;
wire   [1:0] tmp38_fu_1637_p2;
wire   [1:0] tmp_15_39_cast_fu_1261_p1;
wire   [1:0] tmp_15_40_cast_fu_1273_p1;
wire   [1:0] tmp41_fu_1647_p2;
wire   [1:0] tmp_15_38_cast_fu_1249_p1;
wire   [1:0] tmp40_fu_1653_p2;
wire   [2:0] tmp40_cast_fu_1659_p1;
wire   [2:0] tmp38_cast_fu_1643_p1;
wire   [2:0] tmp37_fu_1663_p2;
wire   [1:0] tmp_15_42_cast_fu_1297_p1;
wire   [1:0] tmp_15_43_cast_fu_1309_p1;
wire   [1:0] tmp44_fu_1673_p2;
wire   [1:0] tmp_15_41_cast_fu_1285_p1;
wire   [1:0] tmp43_fu_1679_p2;
wire   [1:0] tmp_15_44_cast_fu_1321_p1;
wire   [1:0] tmp_15_45_cast_fu_1333_p1;
wire   [1:0] tmp46_fu_1689_p2;
wire   [1:0] tmp_15_46_cast_fu_1345_p1;
wire   [1:0] tmp_15_47_cast_fu_1357_p1;
wire   [1:0] tmp47_fu_1699_p2;
wire   [2:0] tmp47_cast_fu_1705_p1;
wire   [2:0] tmp46_cast_fu_1695_p1;
wire   [2:0] tmp45_fu_1709_p2;
wire   [2:0] tmp43_cast_fu_1685_p1;
wire   [2:0] tmp42_fu_1715_p2;
wire   [3:0] tmp42_cast_fu_1721_p1;
wire   [3:0] tmp37_cast_fu_1669_p1;
wire   [4:0] tmp13_cast_fu_1734_p1;
wire   [4:0] tmp2_cast_fu_1731_p1;
wire   [4:0] tmp1_fu_1737_p2;
wire   [4:0] tmp36_cast_fu_1750_p1;
wire   [4:0] tmp25_cast_fu_1747_p1;
wire   [4:0] tmp24_fu_1753_p2;
wire   [5:0] tmp24_cast_fu_1759_p1;
wire   [5:0] tmp1_cast_fu_1743_p1;
wire   [5:0] dis_1_s_fu_1763_p2;
wire   [5:0] p_shl1_fu_1778_p3;
wire   [6:0] p_shl1_cast_fu_1786_p1;
wire   [6:0] x3_cast1_fu_1774_p1;
wire   [0:0] exitcond3_fu_1808_p2;
wire   [3:0] x3_s_fu_1822_p2;
wire   [5:0] p_shl1_mid1_fu_1832_p3;
wire   [6:0] p_shl1_cast_mid1_fu_1840_p1;
wire   [6:0] x3_cast1_mid1_fu_1828_p1;
wire   [6:0] tmp_2_mid1_fu_1844_p2;
wire   [6:0] tmp_2_fu_1790_p2;
wire   [63:0] tmp_5_mid2_fu_1862_p1;
wire   [6:0] tmp_23_1_mid2_v_v_fu_1885_p2;
wire  signed [31:0] tmp_23_1_mid2_v_fu_1890_p1;
wire   [63:0] tmp_23_1_mid2_fu_1894_p1;
wire   [32:0] p_max_id_1_cast1_fu_1916_p1;
wire   [32:0] tmp_21_2_fu_1920_p2;
wire   [63:0] tmp_21_2_cast_fu_1926_p1;
wire   [6:0] tmp_23_2_mid2_v_v_fu_1941_p2;
wire  signed [31:0] tmp_23_2_mid2_v_fu_1946_p1;
wire   [63:0] tmp_23_2_mid2_fu_1950_p1;
wire   [0:0] tmp_24_2_fu_1968_p2;
wire   [1:0] p_max_id_1_cast_fu_1965_p1;
wire   [1:0] p_max_id_2_fu_1972_p3;
wire   [32:0] p_max_id_2_cast_fu_1980_p1;
wire   [32:0] tmp_11_fu_1984_p2;
wire   [63:0] tmp_18_cast_fu_1989_p1;
wire    ap_block_pp3_stage6;
wire   [63:0] tmp_12_fu_2019_p1;
wire   [3:0] grp_fu_2032_p0;
wire   [11:0] grp_fu_2032_p1;
wire   [10:0] grp_fu_2032_p2;
wire   [11:0] grp_fu_2040_p0;
wire   [3:0] grp_fu_2040_p1;
wire   [10:0] grp_fu_2040_p2;
wire   [3:0] grp_fu_2048_p0;
wire   [11:0] grp_fu_2048_p1;
wire   [10:0] grp_fu_2048_p2;
reg    grp_fu_623_ce;
reg    grp_fu_643_ce;
wire    ap_CS_fsm_state72;
reg   [34:0] ap_NS_fsm;
reg    ap_block_pp3_stage1_subdone;
reg    ap_block_pp3_stage2_subdone;
wire    ap_block_state38_pp3_stage3_iter0;
wire    ap_block_state59_pp3_stage3_iter1;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_pp3_stage3_11001;
wire    ap_block_state39_pp3_stage4_iter0;
wire    ap_block_state60_pp3_stage4_iter1;
wire    ap_block_pp3_stage4_subdone;
wire    ap_block_pp3_stage4_11001;
wire    ap_block_state40_pp3_stage5_iter0;
wire    ap_block_state61_pp3_stage5_iter1;
wire    ap_block_pp3_stage5_subdone;
wire    ap_block_pp3_stage5_11001;
wire    ap_block_pp3_stage6_subdone;
reg    ap_block_pp3_stage7_subdone;
reg    ap_block_pp3_stage8_subdone;
reg    ap_block_pp3_stage9_subdone;
reg    ap_block_pp3_stage10_subdone;
reg    ap_block_pp3_stage11_subdone;
reg    ap_block_pp3_stage12_subdone;
wire    ap_block_state48_pp3_stage13_iter0;
wire    ap_block_state69_pp3_stage13_iter1;
wire    ap_block_pp3_stage13_subdone;
wire    ap_block_pp3_stage13_11001;
wire    ap_block_state49_pp3_stage14_iter0;
wire    ap_block_state70_pp3_stage14_iter1;
wire    ap_block_pp3_stage14_subdone;
wire    ap_block_pp3_stage14_11001;
wire    ap_block_state51_pp3_stage16_iter0;
wire    ap_block_pp3_stage16_subdone;
wire    ap_block_pp3_stage16_11001;
wire    ap_block_state52_pp3_stage17_iter0;
wire    ap_block_pp3_stage17_subdone;
wire    ap_block_pp3_stage17_11001;
reg    ap_block_pp3_stage18_subdone;
reg    ap_block_pp3_stage19_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [14:0] grp_fu_2032_p00;
wire   [14:0] grp_fu_2032_p20;
wire   [14:0] grp_fu_2040_p10;
wire   [14:0] grp_fu_2040_p20;
wire   [14:0] grp_fu_2048_p00;
wire   [14:0] grp_fu_2048_p20;
reg    ap_condition_1167;
reg    ap_condition_1180;
reg    ap_condition_1203;
reg    ap_condition_1217;
reg    ap_condition_1241;
reg    ap_condition_1129;
reg    ap_condition_1252;
reg    ap_condition_1143;
reg    ap_condition_1273;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_reg_ioackin_gmem2_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_WREADY = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_ARREADY = 1'b0;
end

digitrec_kernel_digitrec_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
digitrec_kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .test_image(test_image),
    .train_images(train_images),
    .knn_mat(knn_mat)
);

digitrec_kernel_digitrec_kernel_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
digitrec_kernel_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_2071),
    .I_ARID(1'd0),
    .I_ARLEN(32'd18000),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

digitrec_kernel_digitrec_kernel_gmem2_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
digitrec_kernel_gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem2_ARVALID),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(gmem2_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(gmem2_RREADY),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem2_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

digitrec_kernel_digitrec_kernel_temp #(
    .DataWidth( 64 ),
    .AddressRange( 18000 ),
    .AddressWidth( 15 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(temp_d1),
    .q1(temp_q1)
);

digitrec_kernel_digitrec_kernel_urem_5ns_3ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 5 ))
digitrec_kernel_urem_5ns_3ns_5_9_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_371_p4),
    .din1(grp_fu_623_p1),
    .ce(grp_fu_623_ce),
    .dout(grp_fu_623_p2)
);

digitrec_kernel_digitrec_kernel_urem_5ns_3ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 5 ))
digitrec_kernel_urem_5ns_3ns_5_9_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_next_reg_2081),
    .din1(grp_fu_643_p1),
    .ce(grp_fu_643_ce),
    .dout(grp_fu_643_p2)
);

digitrec_kernel_digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1_U3(
    .din0(grp_fu_2032_p0),
    .din1(grp_fu_2032_p1),
    .din2(grp_fu_2032_p2),
    .dout(grp_fu_2032_p3)
);

digitrec_kernel_digitrec_kernel_mac_muladd_12ns_4ns_11ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
digitrec_kernel_mac_muladd_12ns_4ns_11ns_15_1_1_U4(
    .din0(grp_fu_2040_p0),
    .din1(grp_fu_2040_p1),
    .din2(grp_fu_2040_p2),
    .dout(grp_fu_2040_p3)
);

digitrec_kernel_digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1_U5(
    .din0(grp_fu_2048_p0),
    .din1(grp_fu_2048_p1),
    .din2(grp_fu_2048_p2),
    .dout(grp_fu_2048_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state29)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state35) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state35) & (((1'b1 == ap_CS_fsm_pp3_stage20) & (1'b0 == ap_block_pp3_stage20_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_subdone))))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state35);
        end else if ((((1'b1 == ap_CS_fsm_pp3_stage20) & (1'b0 == ap_block_pp3_stage20_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp3_stage12) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage12_11001)) | ((1'b0 == ap_block_pp3_stage11_11001) & (1'b1 == ap_CS_fsm_pp3_stage11) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage2_11001)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_flatten3_reg_2202 == 1'd0)))) begin
            ap_reg_ioackin_gmem2_ARREADY <= 1'b0;
        end else if ((((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001)) | ((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage12) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage12_01001)) | ((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage11) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage11_01001)) | ((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage2_01001)) | ((gmem2_ARREADY == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage1_01001)))) begin
            ap_reg_ioackin_gmem2_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage9_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (tmp_13_reg_2315 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_4_reg_2103 == 1'd1)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
        end else if ((((gmem2_AWREADY == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage9_01001)) | ((gmem2_AWREADY == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_4_reg_2103 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage10_11001) & (1'b1 == ap_CS_fsm_pp3_stage10) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b0;
        end else if ((((gmem2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage10) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage10_01001)) | ((gmem2_WREADY == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            if ((ap_sig_ioackin_gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b0;
            end else if ((gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten1_reg_401 <= 15'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_660_p2 == 1'd0))) begin
        indvar_flatten1_reg_401 <= indvar_flatten_next1_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        indvar_flatten2_reg_434 <= 15'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_fu_721_p2 == 1'd0))) begin
        indvar_flatten2_reg_434 <= indvar_flatten_next2_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten3_reg_467 <= 15'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        indvar_flatten3_reg_467 <= indvar_flatten_next3_reg_2206;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2077 == 1'd0))) begin
        indvar_flatten_reg_367 <= indvar_flatten_next_reg_2081;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_367 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        x1_reg_412 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0))) begin
        x1_reg_412 <= tmp_1_mid2_v_v_reg_2125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        x2_reg_445 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_reg_2146 == 1'd0))) begin
        x2_reg_445 <= tmp_6_mid2_v_v_reg_2160;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        x3_reg_478 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        x3_reg_478 <= tmp_7_mid2_v_v_reg_2228;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_542_p2 == 1'd0))) begin
        x_reg_379 <= x_mid2_fu_604_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_reg_379 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        y1_reg_423 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_660_p2 == 1'd0))) begin
        y1_reg_423 <= y1_1_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        y2_reg_456 <= 11'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_fu_721_p2 == 1'd0))) begin
        y2_reg_456 <= y2_1_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        y3_reg_489 <= 11'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        y3_reg_489 <= y3_1_reg_2295;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_542_p2 == 1'd0))) begin
        y_reg_390 <= y_1_fu_635_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_390 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten1_reg_2111 <= exitcond_flatten1_fu_660_p2;
        exitcond_flatten1_reg_2111_pp1_iter1_reg <= exitcond_flatten1_reg_2111;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond_flatten2_reg_2146 <= exitcond_flatten2_fu_721_p2;
        exitcond_flatten2_reg_2146_pp2_iter1_reg <= exitcond_flatten2_reg_2146;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond_flatten2_reg_2146_pp2_iter2_reg <= exitcond_flatten2_reg_2146_pp2_iter1_reg;
        exitcond_flatten2_reg_2146_pp2_iter3_reg <= exitcond_flatten2_reg_2146_pp2_iter2_reg;
        temp_addr_1_reg_2176_pp2_iter3_reg <= temp_addr_1_reg_2176;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_flatten3_reg_2202 <= exitcond_flatten3_fu_1796_p2;
        exitcond_flatten3_reg_2202_pp3_iter1_reg <= exitcond_flatten3_reg_2202;
        tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg <= tmp_7_mid2_v_v_reg_2228;
        y3_mid2_reg_2211_pp3_iter1_reg <= y3_mid2_reg_2211;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_2077 <= exitcond_flatten_fu_542_p2;
        exitcond_flatten_reg_2077_pp0_iter1_reg <= exitcond_flatten_reg_2077;
        gmem2_addr_reg_2092_pp0_iter1_reg <= gmem2_addr_reg_2092;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_2077_pp0_iter2_reg <= exitcond_flatten_reg_2077_pp0_iter1_reg;
        exitcond_flatten_reg_2077_pp0_iter3_reg <= exitcond_flatten_reg_2077_pp0_iter2_reg;
        exitcond_flatten_reg_2077_pp0_iter4_reg <= exitcond_flatten_reg_2077_pp0_iter3_reg;
        exitcond_flatten_reg_2077_pp0_iter5_reg <= exitcond_flatten_reg_2077_pp0_iter4_reg;
        exitcond_flatten_reg_2077_pp0_iter6_reg <= exitcond_flatten_reg_2077_pp0_iter5_reg;
        exitcond_flatten_reg_2077_pp0_iter7_reg <= exitcond_flatten_reg_2077_pp0_iter6_reg;
        exitcond_flatten_reg_2077_pp0_iter8_reg <= exitcond_flatten_reg_2077_pp0_iter7_reg;
        exitcond_flatten_reg_2077_pp0_iter9_reg <= exitcond_flatten_reg_2077_pp0_iter8_reg;
        gmem2_addr_reg_2092_pp0_iter2_reg <= gmem2_addr_reg_2092_pp0_iter1_reg;
        gmem2_addr_reg_2092_pp0_iter3_reg <= gmem2_addr_reg_2092_pp0_iter2_reg;
        gmem2_addr_reg_2092_pp0_iter4_reg <= gmem2_addr_reg_2092_pp0_iter3_reg;
        gmem2_addr_reg_2092_pp0_iter5_reg <= gmem2_addr_reg_2092_pp0_iter4_reg;
        gmem2_addr_reg_2092_pp0_iter6_reg <= gmem2_addr_reg_2092_pp0_iter5_reg;
        gmem2_addr_reg_2092_pp0_iter7_reg <= gmem2_addr_reg_2092_pp0_iter6_reg;
        gmem2_addr_reg_2092_pp0_iter8_reg <= gmem2_addr_reg_2092_pp0_iter7_reg;
        tmp_15_reg_2107_pp0_iter10_reg <= tmp_15_reg_2107;
        tmp_15_reg_2107_pp0_iter11_reg <= tmp_15_reg_2107_pp0_iter10_reg;
        tmp_15_reg_2107_pp0_iter12_reg <= tmp_15_reg_2107_pp0_iter11_reg;
        tmp_15_reg_2107_pp0_iter13_reg <= tmp_15_reg_2107_pp0_iter12_reg;
        tmp_15_reg_2107_pp0_iter14_reg <= tmp_15_reg_2107_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_1_read_reg_2246 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten3_fu_1796_p2 == 1'd0))) begin
        gmem2_addr_1_reg_2234 <= knn_mat4_sum6_fu_1874_p2;
        tmp_5_mid2_v_reg_2223 <= tmp_5_mid2_v_fu_1858_p1;
        tmp_5_mid2_v_v_reg_2217 <= tmp_5_mid2_v_v_fu_1850_p3;
        y3_mid2_reg_2211 <= y3_mid2_fu_1814_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage9_11001) & (1'b1 == ap_CS_fsm_pp3_stage9) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_2_read_reg_2251 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_2_reg_2240 <= knn_mat4_sum7_fu_1898_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage18_11001) & (1'b1 == ap_CS_fsm_pp3_stage18) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_3_read_reg_2278 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage10_11001) & (1'b1 == ap_CS_fsm_pp3_stage10) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_3_reg_2266 <= knn_mat4_sum8_fu_1930_p2;
        tmp_24_1_reg_2261 <= tmp_24_1_fu_1912_p2;
        tmp_5_cast_mid2_reg_2256[31 : 0] <= tmp_5_cast_mid2_fu_1909_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage19_11001) & (1'b1 == ap_CS_fsm_pp3_stage19) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_4_read_reg_2283 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage11_11001) & (1'b1 == ap_CS_fsm_pp3_stage11) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_4_reg_2272 <= knn_mat4_sum9_fu_1954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage7_11001) & (1'b1 == ap_CS_fsm_pp3_stage7) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0))) begin
        gmem2_addr_5_read_reg_2310 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage20_11001) & (1'b1 == ap_CS_fsm_pp3_stage20) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        gmem2_addr_5_reg_2288 <= knn_mat4_sum1_fu_1993_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_542_p2 == 1'd0))) begin
        gmem2_addr_reg_2092 <= knn_mat4_sum5_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0))) begin
        gmem_addr_read_reg_2141 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_reg_2071[60 : 0] <= tmp_1_fu_510_p1[60 : 0];
        knn_mat_read_reg_2056 <= knn_mat;
        test_image_read_reg_2066 <= test_image;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        indvar_flatten_next3_reg_2206 <= indvar_flatten_next3_fu_1802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_2081 <= indvar_flatten_next_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten2_reg_2146_pp2_iter1_reg == 1'd0))) begin
        temp_addr_1_reg_2176 <= tmp_6_fu_773_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten2_reg_2146_pp2_iter2_reg == 1'd0))) begin
        tmp13_reg_2187 <= tmp13_fu_1535_p2;
        tmp25_reg_2192 <= tmp25_fu_1625_p2;
        tmp2_reg_2182 <= tmp2_fu_1445_p2;
        tmp36_reg_2197 <= tmp36_fu_1725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0))) begin
        tmp_13_reg_2315 <= tmp_13_fu_2022_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_2077_pp0_iter8_reg == 1'd0))) begin
        tmp_15_reg_2107 <= tmp_15_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_660_p2 == 1'd0))) begin
        tmp_1_mid2_v_v_reg_2125 <= tmp_1_mid2_v_v_fu_692_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_2077_pp0_iter7_reg == 1'd0))) begin
        tmp_4_reg_2103 <= tmp_4_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_reg_2146 == 1'd0))) begin
        tmp_5_reg_2171 <= grp_fu_2040_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8) & (tmp_13_fu_2022_p2 == 1'd1))) begin
        tmp_65_reg_2319 <= tmp_65_fu_2028_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_fu_721_p2 == 1'd0))) begin
        tmp_6_mid2_v_v_reg_2160 <= tmp_6_mid2_v_v_fu_753_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_fu_1796_p2 == 1'd0))) begin
        tmp_7_mid2_v_v_reg_2228 <= tmp_7_mid2_v_v_fu_1866_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage6_11001) & (1'b1 == ap_CS_fsm_pp3_stage6) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0))) begin
        tmp_7_reg_2300 <= grp_fu_2048_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0))) begin
        tmp_8_reg_2136 <= grp_fu_2032_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_660_p2 == 1'd0))) begin
        y1_mid2_reg_2120 <= y1_mid2_fu_678_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_fu_721_p2 == 1'd0))) begin
        y2_mid2_reg_2155 <= y2_mid2_fu_739_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage20_11001) & (1'b1 == ap_CS_fsm_pp3_stage20) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        y3_1_reg_2295 <= y3_1_fu_2004_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_542_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_660_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_721_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten3_fu_1796_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        ap_phi_mux_indvar_flatten3_phi_fu_471_p4 = indvar_flatten_next3_reg_2206;
    end else begin
        ap_phi_mux_indvar_flatten3_phi_fu_471_p4 = indvar_flatten3_reg_467;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_2077 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_371_p4 = indvar_flatten_next_reg_2081;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_371_p4 = indvar_flatten_reg_367;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_x1_phi_fu_416_p4 = tmp_1_mid2_v_v_reg_2125;
    end else begin
        ap_phi_mux_x1_phi_fu_416_p4 = x1_reg_412;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten2_reg_2146 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_x2_phi_fu_449_p4 = tmp_6_mid2_v_v_reg_2160;
    end else begin
        ap_phi_mux_x2_phi_fu_449_p4 = x2_reg_445;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        ap_phi_mux_x3_phi_fu_482_p4 = tmp_7_mid2_v_v_reg_2228;
    end else begin
        ap_phi_mux_x3_phi_fu_482_p4 = x3_reg_478;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        ap_phi_mux_y3_phi_fu_493_p4 = y3_1_reg_2295;
    end else begin
        ap_phi_mux_y3_phi_fu_493_p4 = y3_reg_489;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem2_ARREADY = gmem2_ARREADY;
    end else begin
        ap_sig_ioackin_gmem2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem2_AWREADY = gmem2_AWREADY;
    end else begin
        ap_sig_ioackin_gmem2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem2_WREADY = gmem2_WREADY;
    end else begin
        ap_sig_ioackin_gmem2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0))) begin
        if ((1'b1 == ap_condition_1241)) begin
            gmem2_ARADDR = gmem2_addr_5_reg_2288;
        end else if ((1'b1 == ap_condition_1217)) begin
            gmem2_ARADDR = gmem2_addr_4_reg_2272;
        end else if ((1'b1 == ap_condition_1203)) begin
            gmem2_ARADDR = gmem2_addr_3_reg_2266;
        end else if ((1'b1 == ap_condition_1180)) begin
            gmem2_ARADDR = gmem2_addr_2_reg_2240;
        end else if ((1'b1 == ap_condition_1167)) begin
            gmem2_ARADDR = gmem2_addr_1_reg_2234;
        end else begin
            gmem2_ARADDR = 'bx;
        end
    end else begin
        gmem2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001)) | ((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage12) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage12_01001)) | ((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage11) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage11_01001)) | ((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage2_01001)) | ((ap_reg_ioackin_gmem2_ARREADY == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_flatten3_reg_2202 == 1'd0) & (1'b0 == ap_block_pp3_stage1_01001)))) begin
        gmem2_ARVALID = 1'b1;
    end else begin
        gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_1252)) begin
            gmem2_AWADDR = gmem2_addr_5_reg_2288;
        end else if ((1'b1 == ap_condition_1129)) begin
            gmem2_AWADDR = gmem2_addr_reg_2092_pp0_iter8_reg;
        end else begin
            gmem2_AWADDR = 'bx;
        end
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_1252)) begin
            gmem2_AWLEN = 32'd1;
        end else if ((1'b1 == ap_condition_1129)) begin
            gmem2_AWLEN = 32'd3;
        end else begin
            gmem2_AWLEN = 'bx;
        end
    end else begin
        gmem2_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem2_AWREADY == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage9_01001)) | ((ap_reg_ioackin_gmem2_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_4_reg_2103 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage15) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage15_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage7_11001) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage19_11001) & (1'b1 == ap_CS_fsm_pp3_stage19) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage18_11001) & (1'b1 == ap_CS_fsm_pp3_stage18) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage9_11001) & (1'b1 == ap_CS_fsm_pp3_stage9) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)))) begin
        gmem2_RREADY = 1'b1;
    end else begin
        gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem2_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_1273)) begin
            gmem2_WDATA = tmp_65_reg_2319;
        end else if ((1'b1 == ap_condition_1143)) begin
            gmem2_WDATA = 8'd50;
        end else begin
            gmem2_WDATA = 'bx;
        end
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem2_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage10) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage10_01001)) | ((ap_reg_ioackin_gmem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage12) & (1'b1 == ap_CS_fsm_pp3_stage12) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage11) & (1'b1 == ap_CS_fsm_pp3_stage11) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage2) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_flatten3_reg_2202 == 1'd0)))) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage9) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (tmp_13_reg_2315 == 1'd1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_4_reg_2103 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage15) & (1'b1 == ap_CS_fsm_pp3_stage15) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage7) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage19) & (1'b1 == ap_CS_fsm_pp3_stage19) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage18) & (1'b1 == ap_CS_fsm_pp3_stage18) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage9) & (1'b1 == ap_CS_fsm_pp3_stage9) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)) | ((1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage10) & (1'b1 == ap_CS_fsm_pp3_stage10) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_2111 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_623_ce = 1'b1;
    end else begin
        grp_fu_623_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_643_ce = 1'b1;
    end else begin
        grp_fu_643_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_address0 = tmp_6_fu_773_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        temp_address0 = tmp_9_fu_712_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage7) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        temp_address1 = tmp_10_fu_2015_p1;
    end else if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_address1 = temp_addr_1_reg_2176_pp2_iter3_reg;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((1'b0 == ap_block_pp3_stage7_11001) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond_flatten1_reg_2111_pp1_iter1_reg == 1'd0))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1) & (exitcond_flatten2_reg_2146_pp2_iter3_reg == 1'd0))) begin
        temp_we1 = 1'b1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_542_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_542_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_660_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_660_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_flatten2_fu_721_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_flatten2_fu_721_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_fu_1796_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_fu_1796_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((1'b0 == ap_block_pp3_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_pp3_stage9 : begin
            if ((1'b0 == ap_block_pp3_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end
        end
        ap_ST_fsm_pp3_stage10 : begin
            if ((1'b0 == ap_block_pp3_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end
        end
        ap_ST_fsm_pp3_stage11 : begin
            if ((1'b0 == ap_block_pp3_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end
        end
        ap_ST_fsm_pp3_stage12 : begin
            if ((1'b0 == ap_block_pp3_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end
        end
        ap_ST_fsm_pp3_stage13 : begin
            if ((1'b0 == ap_block_pp3_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end
        end
        ap_ST_fsm_pp3_stage14 : begin
            if ((1'b0 == ap_block_pp3_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end
        end
        ap_ST_fsm_pp3_stage15 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage15) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage15_subdone)) & (1'b0 == ap_block_pp3_stage15_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage16;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage15) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage15_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end
        end
        ap_ST_fsm_pp3_stage16 : begin
            if ((1'b0 == ap_block_pp3_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage16;
            end
        end
        ap_ST_fsm_pp3_stage17 : begin
            if ((1'b0 == ap_block_pp3_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage17;
            end
        end
        ap_ST_fsm_pp3_stage18 : begin
            if ((1'b0 == ap_block_pp3_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage18;
            end
        end
        ap_ST_fsm_pp3_stage19 : begin
            if ((1'b0 == ap_block_pp3_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage19;
            end
        end
        ap_ST_fsm_pp3_stage20 : begin
            if ((1'b0 == ap_block_pp3_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage20;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp3_stage10 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage11 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage12 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp3_stage15 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp3_stage18 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp3_stage19 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp3_stage20 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp3_stage6 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage7 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp3_stage9 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd34];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_flatten1_reg_2111 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_flatten1_reg_2111 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage10_11001 = ((1'b1 == ap_block_state66_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage10_subdone = ((1'b1 == ap_block_state66_io) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp3_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage11_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage11_11001 = ((1'b1 == ap_block_state46_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage11_subdone = ((1'b1 == ap_block_state46_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage12_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage12_11001 = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage12_subdone = ((1'b1 == ap_block_state47_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage15_11001 = ((gmem2_BVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1));
end

always @ (*) begin
    ap_block_pp3_stage15_subdone = ((gmem2_BVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1));
end

assign ap_block_pp3_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage18_11001 = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage18_subdone = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_pp3_stage19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage19_11001 = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage19_subdone = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_pp3_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((1'b1 == ap_block_state36_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((1'b1 == ap_block_state36_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage2_11001 = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage2_subdone = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage7_11001 = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage7_subdone = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0));
end

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage8_11001 = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage8_subdone = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_pp3_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage9_01001 = ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage9_11001 = (((1'b1 == ap_block_state65_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)));
end

always @ (*) begin
    ap_block_pp3_stage9_subdone = (((1'b1 == ap_block_state65_io) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((gmem2_RVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten3_reg_2202 == 1'd0)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((ap_sig_ioackin_gmem2_AWREADY == 1'b0) & (tmp_4_reg_2103 == 1'd1));
end

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((ap_sig_ioackin_gmem2_WREADY == 1'b0) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter15 = ((gmem2_BVALID == 1'b0) & (tmp_15_reg_2107_pp0_iter14_reg == 1'd1));
end

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten1_reg_2111 == 1'd0));
end

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((ap_sig_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state36_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state37_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp3_stage8_iter0 = ((gmem2_RVALID == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_state44_pp3_stage9_iter0 = ((gmem2_RVALID == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state45_pp3_stage10_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46_io = ((ap_sig_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state46_pp3_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_io = ((ap_sig_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state47_pp3_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage17_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state53_pp3_stage18_iter0 = ((gmem2_RVALID == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

always @ (*) begin
    ap_block_state54_pp3_stage19_iter0 = ((gmem2_RVALID == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state55_pp3_stage20_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state56_io = ((ap_sig_ioackin_gmem2_ARREADY == 1'b0) & (exitcond_flatten3_reg_2202 == 1'd0));
end

assign ap_block_state56_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_pp3_stage7_iter1 = ((gmem2_RVALID == 1'b0) & (exitcond_flatten3_reg_2202_pp3_iter1_reg == 1'd0));
end

assign ap_block_state64_pp3_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65_io = ((ap_sig_ioackin_gmem2_AWREADY == 1'b0) & (tmp_13_reg_2315 == 1'd1));
end

assign ap_block_state65_pp3_stage9_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66_io = ((ap_sig_ioackin_gmem2_WREADY == 1'b0) & (tmp_13_reg_2315 == 1'd1));
end

assign ap_block_state66_pp3_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp3_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp3_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp3_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp3_stage14_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state71_pp3_stage15_iter1 = ((gmem2_BVALID == 1'b0) & (tmp_13_reg_2315 == 1'd1));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1129 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_4_reg_2103 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_1143 = ((ap_enable_reg_pp0_iter10 == 1'b1) & (exitcond_flatten_reg_2077_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_1167 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_01001));
end

always @ (*) begin
    ap_condition_1180 = ((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage2_01001));
end

always @ (*) begin
    ap_condition_1203 = ((1'b1 == ap_CS_fsm_pp3_stage11) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage11_01001));
end

always @ (*) begin
    ap_condition_1217 = ((1'b1 == ap_CS_fsm_pp3_stage12) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage12_01001));
end

always @ (*) begin
    ap_condition_1241 = ((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_01001));
end

always @ (*) begin
    ap_condition_1252 = ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage9_01001));
end

always @ (*) begin
    ap_condition_1273 = ((1'b1 == ap_CS_fsm_pp3_stage10) & (ap_enable_reg_pp3_iter1 == 1'b1) & (tmp_13_reg_2315 == 1'd1) & (1'b0 == ap_block_pp3_stage10_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign dis_1_s_fu_1763_p2 = (tmp24_cast_fu_1759_p1 + tmp1_cast_fu_1743_p1);

assign exitcond1_fu_672_p2 = ((y1_reg_423 == 11'd1800) ? 1'b1 : 1'b0);

assign exitcond2_fu_733_p2 = ((y2_reg_456 == 11'd1800) ? 1'b1 : 1'b0);

assign exitcond3_fu_1808_p2 = ((ap_phi_mux_y3_phi_fu_493_p4 == 11'd1800) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_660_p2 = ((indvar_flatten1_reg_401 == 15'd18000) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_721_p2 = ((indvar_flatten2_reg_434 == 15'd18000) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_1796_p2 = ((ap_phi_mux_indvar_flatten3_phi_fu_471_p4 == 15'd18000) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_542_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_371_p4 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_fu_554_p2 = ((y_reg_390 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_2032_p0 = grp_fu_2032_p00;

assign grp_fu_2032_p00 = tmp_1_mid2_v_v_reg_2125;

assign grp_fu_2032_p1 = 15'd1800;

assign grp_fu_2032_p2 = grp_fu_2032_p20;

assign grp_fu_2032_p20 = y1_mid2_reg_2120;

assign grp_fu_2040_p0 = 15'd1800;

assign grp_fu_2040_p1 = grp_fu_2040_p10;

assign grp_fu_2040_p10 = tmp_6_mid2_v_v_reg_2160;

assign grp_fu_2040_p2 = grp_fu_2040_p20;

assign grp_fu_2040_p20 = y2_mid2_reg_2155;

assign grp_fu_2048_p0 = grp_fu_2048_p00;

assign grp_fu_2048_p00 = tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg;

assign grp_fu_2048_p1 = 15'd1800;

assign grp_fu_2048_p2 = grp_fu_2048_p20;

assign grp_fu_2048_p20 = y3_mid2_reg_2211_pp3_iter1_reg;

assign grp_fu_623_p1 = 5'd3;

assign grp_fu_643_p1 = 5'd3;

assign indvar_flatten_next1_fu_666_p2 = (indvar_flatten1_reg_401 + 15'd1);

assign indvar_flatten_next2_fu_727_p2 = (indvar_flatten2_reg_434 + 15'd1);

assign indvar_flatten_next3_fu_1802_p2 = (ap_phi_mux_indvar_flatten3_phi_fu_471_p4 + 15'd1);

assign indvar_flatten_next_fu_548_p2 = (ap_phi_mux_indvar_flatten_phi_fu_371_p4 + 5'd1);

assign knn_mat4_sum1_fu_1993_p2 = (tmp_18_cast_fu_1989_p1 + knn_mat_read_reg_2056);

assign knn_mat4_sum5_fu_612_p2 = (tmp_30_mid2_fu_600_p1 + knn_mat_read_reg_2056);

assign knn_mat4_sum6_fu_1874_p2 = (tmp_5_mid2_fu_1862_p1 + knn_mat_read_reg_2056);

assign knn_mat4_sum7_fu_1898_p2 = (tmp_23_1_mid2_fu_1894_p1 + knn_mat_read_reg_2056);

assign knn_mat4_sum8_fu_1930_p2 = (tmp_21_2_cast_fu_1926_p1 + knn_mat_read_reg_2056);

assign knn_mat4_sum9_fu_1954_p2 = (tmp_23_2_mid2_fu_1950_p1 + knn_mat_read_reg_2056);

assign p_max_id_1_cast1_fu_1916_p1 = tmp_24_1_fu_1912_p2;

assign p_max_id_1_cast_fu_1965_p1 = tmp_24_1_reg_2261;

assign p_max_id_2_cast_fu_1980_p1 = p_max_id_2_fu_1972_p3;

assign p_max_id_2_fu_1972_p3 = ((tmp_24_2_fu_1968_p2[0:0] === 1'b1) ? 2'd2 : p_max_id_1_cast_fu_1965_p1);

assign p_shl1_cast_fu_1786_p1 = p_shl1_fu_1778_p3;

assign p_shl1_cast_mid1_fu_1840_p1 = p_shl1_mid1_fu_1832_p3;

assign p_shl1_fu_1778_p3 = {{ap_phi_mux_x3_phi_fu_482_p4}, {2'd0}};

assign p_shl1_mid1_fu_1832_p3 = {{x3_s_fu_1822_p2}, {2'd0}};

assign p_shl_cast_fu_532_p1 = p_shl_fu_524_p3;

assign p_shl_cast_mid1_fu_578_p1 = p_shl_mid1_fu_570_p3;

assign p_shl_fu_524_p3 = {{x_reg_379}, {2'd0}};

assign p_shl_mid1_fu_570_p3 = {{x_s_fu_560_p2}, {2'd0}};

assign temp_d0 = (test_image_read_reg_2066 ^ gmem_addr_read_reg_2141);

assign temp_d1 = dis_1_s_fu_1763_p2;

assign tmp10_fu_1403_p2 = (tmp_15_7_cast_fu_865_p1 + tmp_15_8_cast_fu_877_p1);

assign tmp11_cast_fu_1431_p1 = tmp11_fu_1425_p2;

assign tmp11_fu_1425_p2 = (tmp12_fu_1419_p2 + tmp_15_9_cast_fu_889_p1);

assign tmp12_fu_1419_p2 = (tmp_15_cast_fu_901_p1 + tmp_15_10_cast_fu_913_p1);

assign tmp13_cast_fu_1734_p1 = tmp13_reg_2187;

assign tmp13_fu_1535_p2 = (tmp19_cast_fu_1531_p1 + tmp14_cast_fu_1489_p1);

assign tmp14_cast_fu_1489_p1 = tmp14_fu_1483_p2;

assign tmp14_fu_1483_p2 = (tmp17_cast_fu_1479_p1 + tmp15_cast_fu_1463_p1);

assign tmp15_cast_fu_1463_p1 = tmp15_fu_1457_p2;

assign tmp15_fu_1457_p2 = (tmp16_fu_1451_p2 + tmp_15_11_cast_fu_925_p1);

assign tmp16_fu_1451_p2 = (tmp_15_12_cast_fu_937_p1 + tmp_15_13_cast_fu_949_p1);

assign tmp17_cast_fu_1479_p1 = tmp17_fu_1473_p2;

assign tmp17_fu_1473_p2 = (tmp18_fu_1467_p2 + tmp_15_14_cast_fu_961_p1);

assign tmp18_fu_1467_p2 = (tmp_15_15_cast_fu_973_p1 + tmp_15_16_cast_fu_985_p1);

assign tmp19_cast_fu_1531_p1 = tmp19_fu_1525_p2;

assign tmp19_fu_1525_p2 = (tmp22_cast_fu_1521_p1 + tmp20_cast_fu_1505_p1);

assign tmp1_cast_fu_1743_p1 = tmp1_fu_1737_p2;

assign tmp1_fu_1737_p2 = (tmp13_cast_fu_1734_p1 + tmp2_cast_fu_1731_p1);

assign tmp20_cast_fu_1505_p1 = tmp20_fu_1499_p2;

assign tmp20_fu_1499_p2 = (tmp21_fu_1493_p2 + tmp_15_17_cast_fu_997_p1);

assign tmp21_fu_1493_p2 = (tmp_15_18_cast_fu_1009_p1 + tmp_15_19_cast_fu_1021_p1);

assign tmp22_cast_fu_1521_p1 = tmp22_fu_1515_p2;

assign tmp22_fu_1515_p2 = (tmp23_fu_1509_p2 + tmp_15_20_cast_fu_1033_p1);

assign tmp23_fu_1509_p2 = (tmp_15_21_cast_fu_1045_p1 + tmp_15_22_cast_fu_1057_p1);

assign tmp24_cast_fu_1759_p1 = tmp24_fu_1753_p2;

assign tmp24_fu_1753_p2 = (tmp36_cast_fu_1750_p1 + tmp25_cast_fu_1747_p1);

assign tmp25_cast_fu_1747_p1 = tmp25_reg_2192;

assign tmp25_fu_1625_p2 = (tmp31_cast_fu_1621_p1 + tmp26_cast_fu_1579_p1);

assign tmp26_cast_fu_1579_p1 = tmp26_fu_1573_p2;

assign tmp26_fu_1573_p2 = (tmp29_cast_fu_1569_p1 + tmp27_cast_fu_1553_p1);

assign tmp27_cast_fu_1553_p1 = tmp27_fu_1547_p2;

assign tmp27_fu_1547_p2 = (tmp28_fu_1541_p2 + tmp_15_23_cast_fu_1069_p1);

assign tmp28_fu_1541_p2 = (tmp_15_24_cast_fu_1081_p1 + tmp_15_25_cast_fu_1093_p1);

assign tmp29_cast_fu_1569_p1 = tmp29_fu_1563_p2;

assign tmp29_fu_1563_p2 = (tmp30_fu_1557_p2 + tmp_15_26_cast_fu_1105_p1);

assign tmp2_cast_fu_1731_p1 = tmp2_reg_2182;

assign tmp2_fu_1445_p2 = (tmp8_cast_fu_1441_p1 + tmp3_cast_fu_1399_p1);

assign tmp30_fu_1557_p2 = (tmp_15_27_cast_fu_1117_p1 + tmp_15_28_cast_fu_1129_p1);

assign tmp31_cast_fu_1621_p1 = tmp31_fu_1615_p2;

assign tmp31_fu_1615_p2 = (tmp34_cast_fu_1611_p1 + tmp32_cast_fu_1595_p1);

assign tmp32_cast_fu_1595_p1 = tmp32_fu_1589_p2;

assign tmp32_fu_1589_p2 = (tmp33_fu_1583_p2 + tmp_15_29_cast_fu_1141_p1);

assign tmp33_fu_1583_p2 = (tmp_15_30_cast_fu_1153_p1 + tmp_15_31_cast_fu_1165_p1);

assign tmp34_cast_fu_1611_p1 = tmp34_fu_1605_p2;

assign tmp34_fu_1605_p2 = (tmp35_fu_1599_p2 + tmp_15_32_cast_fu_1177_p1);

assign tmp35_fu_1599_p2 = (tmp_15_33_cast_fu_1189_p1 + tmp_15_34_cast_fu_1201_p1);

assign tmp36_cast_fu_1750_p1 = tmp36_reg_2197;

assign tmp36_fu_1725_p2 = (tmp42_cast_fu_1721_p1 + tmp37_cast_fu_1669_p1);

assign tmp37_cast_fu_1669_p1 = tmp37_fu_1663_p2;

assign tmp37_fu_1663_p2 = (tmp40_cast_fu_1659_p1 + tmp38_cast_fu_1643_p1);

assign tmp38_cast_fu_1643_p1 = tmp38_fu_1637_p2;

assign tmp38_fu_1637_p2 = (tmp39_fu_1631_p2 + tmp_15_35_cast_fu_1213_p1);

assign tmp39_fu_1631_p2 = (tmp_15_36_cast_fu_1225_p1 + tmp_15_37_cast_fu_1237_p1);

assign tmp3_cast_fu_1399_p1 = tmp3_fu_1393_p2;

assign tmp3_fu_1393_p2 = (tmp6_cast_fu_1389_p1 + tmp4_cast_fu_1373_p1);

assign tmp40_cast_fu_1659_p1 = tmp40_fu_1653_p2;

assign tmp40_fu_1653_p2 = (tmp41_fu_1647_p2 + tmp_15_38_cast_fu_1249_p1);

assign tmp41_fu_1647_p2 = (tmp_15_39_cast_fu_1261_p1 + tmp_15_40_cast_fu_1273_p1);

assign tmp42_cast_fu_1721_p1 = tmp42_fu_1715_p2;

assign tmp42_fu_1715_p2 = (tmp45_fu_1709_p2 + tmp43_cast_fu_1685_p1);

assign tmp43_cast_fu_1685_p1 = tmp43_fu_1679_p2;

assign tmp43_fu_1679_p2 = (tmp44_fu_1673_p2 + tmp_15_41_cast_fu_1285_p1);

assign tmp44_fu_1673_p2 = (tmp_15_42_cast_fu_1297_p1 + tmp_15_43_cast_fu_1309_p1);

assign tmp45_fu_1709_p2 = (tmp47_cast_fu_1705_p1 + tmp46_cast_fu_1695_p1);

assign tmp46_cast_fu_1695_p1 = tmp46_fu_1689_p2;

assign tmp46_fu_1689_p2 = (tmp_15_44_cast_fu_1321_p1 + tmp_15_45_cast_fu_1333_p1);

assign tmp47_cast_fu_1705_p1 = tmp47_fu_1699_p2;

assign tmp47_fu_1699_p2 = (tmp_15_46_cast_fu_1345_p1 + tmp_15_47_cast_fu_1357_p1);

assign tmp4_cast_fu_1373_p1 = tmp4_fu_1367_p2;

assign tmp4_fu_1367_p2 = (tmp5_fu_1361_p2 + tmp_15_1_cast_fu_793_p1);

assign tmp5_fu_1361_p2 = (tmp_22_cast_fu_781_p1 + tmp_15_2_cast_fu_805_p1);

assign tmp6_cast_fu_1389_p1 = tmp6_fu_1383_p2;

assign tmp6_fu_1383_p2 = (tmp7_fu_1377_p2 + tmp_15_3_cast_fu_817_p1);

assign tmp7_fu_1377_p2 = (tmp_15_4_cast_fu_829_p1 + tmp_15_5_cast_fu_841_p1);

assign tmp8_cast_fu_1441_p1 = tmp8_fu_1435_p2;

assign tmp8_fu_1435_p2 = (tmp11_cast_fu_1431_p1 + tmp9_cast_fu_1415_p1);

assign tmp9_cast_fu_1415_p1 = tmp9_fu_1409_p2;

assign tmp9_fu_1409_p2 = (tmp10_fu_1403_p2 + tmp_15_6_cast_fu_853_p1);

assign tmp_10_fu_2015_p1 = tmp_7_reg_2300;

assign tmp_11_fu_1984_p2 = (tmp_5_cast_mid2_reg_2256 + p_max_id_2_cast_fu_1980_p1);

assign tmp_12_fu_2019_p1 = gmem2_addr_5_read_reg_2310;

assign tmp_13_fu_2022_p2 = ((temp_q1 < tmp_12_fu_2019_p1) ? 1'b1 : 1'b0);

assign tmp_15_10_cast_fu_913_p1 = tmp_27_fu_905_p3;

assign tmp_15_11_cast_fu_925_p1 = tmp_28_fu_917_p3;

assign tmp_15_12_cast_fu_937_p1 = tmp_29_fu_929_p3;

assign tmp_15_13_cast_fu_949_p1 = tmp_30_fu_941_p3;

assign tmp_15_14_cast_fu_961_p1 = tmp_31_fu_953_p3;

assign tmp_15_15_cast_fu_973_p1 = tmp_32_fu_965_p3;

assign tmp_15_16_cast_fu_985_p1 = tmp_33_fu_977_p3;

assign tmp_15_17_cast_fu_997_p1 = tmp_34_fu_989_p3;

assign tmp_15_18_cast_fu_1009_p1 = tmp_35_fu_1001_p3;

assign tmp_15_19_cast_fu_1021_p1 = tmp_36_fu_1013_p3;

assign tmp_15_1_cast_fu_793_p1 = tmp_17_fu_785_p3;

assign tmp_15_20_cast_fu_1033_p1 = tmp_37_fu_1025_p3;

assign tmp_15_21_cast_fu_1045_p1 = tmp_38_fu_1037_p3;

assign tmp_15_22_cast_fu_1057_p1 = tmp_39_fu_1049_p3;

assign tmp_15_23_cast_fu_1069_p1 = tmp_40_fu_1061_p3;

assign tmp_15_24_cast_fu_1081_p1 = tmp_41_fu_1073_p3;

assign tmp_15_25_cast_fu_1093_p1 = tmp_42_fu_1085_p3;

assign tmp_15_26_cast_fu_1105_p1 = tmp_43_fu_1097_p3;

assign tmp_15_27_cast_fu_1117_p1 = tmp_44_fu_1109_p3;

assign tmp_15_28_cast_fu_1129_p1 = tmp_45_fu_1121_p3;

assign tmp_15_29_cast_fu_1141_p1 = tmp_46_fu_1133_p3;

assign tmp_15_2_cast_fu_805_p1 = tmp_18_fu_797_p3;

assign tmp_15_30_cast_fu_1153_p1 = tmp_47_fu_1145_p3;

assign tmp_15_31_cast_fu_1165_p1 = tmp_48_fu_1157_p3;

assign tmp_15_32_cast_fu_1177_p1 = tmp_49_fu_1169_p3;

assign tmp_15_33_cast_fu_1189_p1 = tmp_50_fu_1181_p3;

assign tmp_15_34_cast_fu_1201_p1 = tmp_51_fu_1193_p3;

assign tmp_15_35_cast_fu_1213_p1 = tmp_52_fu_1205_p3;

assign tmp_15_36_cast_fu_1225_p1 = tmp_53_fu_1217_p3;

assign tmp_15_37_cast_fu_1237_p1 = tmp_54_fu_1229_p3;

assign tmp_15_38_cast_fu_1249_p1 = tmp_55_fu_1241_p3;

assign tmp_15_39_cast_fu_1261_p1 = tmp_56_fu_1253_p3;

assign tmp_15_3_cast_fu_817_p1 = tmp_19_fu_809_p3;

assign tmp_15_40_cast_fu_1273_p1 = tmp_57_fu_1265_p3;

assign tmp_15_41_cast_fu_1285_p1 = tmp_58_fu_1277_p3;

assign tmp_15_42_cast_fu_1297_p1 = tmp_59_fu_1289_p3;

assign tmp_15_43_cast_fu_1309_p1 = tmp_60_fu_1301_p3;

assign tmp_15_44_cast_fu_1321_p1 = tmp_61_fu_1313_p3;

assign tmp_15_45_cast_fu_1333_p1 = tmp_62_fu_1325_p3;

assign tmp_15_46_cast_fu_1345_p1 = tmp_63_fu_1337_p3;

assign tmp_15_47_cast_fu_1357_p1 = tmp_64_fu_1349_p3;

assign tmp_15_4_cast_fu_829_p1 = tmp_20_fu_821_p3;

assign tmp_15_5_cast_fu_841_p1 = tmp_21_fu_833_p3;

assign tmp_15_6_cast_fu_853_p1 = tmp_22_fu_845_p3;

assign tmp_15_7_cast_fu_865_p1 = tmp_23_fu_857_p3;

assign tmp_15_8_cast_fu_877_p1 = tmp_24_fu_869_p3;

assign tmp_15_9_cast_fu_889_p1 = tmp_25_fu_881_p3;

assign tmp_15_cast_fu_901_p1 = tmp_26_fu_893_p3;

assign tmp_15_fu_654_p2 = ((grp_fu_643_p2 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_16_fu_777_p1 = temp_q0[0:0];

assign tmp_17_fu_785_p3 = temp_q0[32'd1];

assign tmp_18_cast_fu_1989_p1 = tmp_11_fu_1984_p2;

assign tmp_18_fu_797_p3 = temp_q0[32'd2];

assign tmp_19_fu_809_p3 = temp_q0[32'd3];

assign tmp_1_fu_510_p1 = train_images1_fu_500_p4;

assign tmp_1_mid2_v_v_fu_692_p3 = ((exitcond1_fu_672_p2[0:0] === 1'b1) ? x1_s_fu_686_p2 : ap_phi_mux_x1_phi_fu_416_p4);

assign tmp_20_fu_821_p3 = temp_q0[32'd4];

assign tmp_21_2_cast_fu_1926_p1 = tmp_21_2_fu_1920_p2;

assign tmp_21_2_fu_1920_p2 = (p_max_id_1_cast1_fu_1916_p1 + tmp_5_cast_mid2_fu_1909_p1);

assign tmp_21_fu_833_p3 = temp_q0[32'd5];

assign tmp_22_cast_fu_781_p1 = tmp_16_fu_777_p1;

assign tmp_22_fu_845_p3 = temp_q0[32'd6];

assign tmp_23_1_mid2_fu_1894_p1 = $unsigned(tmp_23_1_mid2_v_fu_1890_p1);

assign tmp_23_1_mid2_v_fu_1890_p1 = $signed(tmp_23_1_mid2_v_v_fu_1885_p2);

assign tmp_23_1_mid2_v_v_fu_1885_p2 = ($signed(tmp_5_mid2_v_v_reg_2217) + $signed(7'd1));

assign tmp_23_2_mid2_fu_1950_p1 = $unsigned(tmp_23_2_mid2_v_fu_1946_p1);

assign tmp_23_2_mid2_v_fu_1946_p1 = $signed(tmp_23_2_mid2_v_v_fu_1941_p2);

assign tmp_23_2_mid2_v_v_fu_1941_p2 = ($signed(tmp_5_mid2_v_v_reg_2217) + $signed(7'd2));

assign tmp_23_fu_857_p3 = temp_q0[32'd7];

assign tmp_24_1_fu_1912_p2 = ((gmem2_addr_1_read_reg_2246 < gmem2_addr_2_read_reg_2251) ? 1'b1 : 1'b0);

assign tmp_24_2_fu_1968_p2 = ((gmem2_addr_3_read_reg_2278 < gmem2_addr_4_read_reg_2283) ? 1'b1 : 1'b0);

assign tmp_24_fu_869_p3 = temp_q0[32'd8];

assign tmp_25_fu_881_p3 = temp_q0[32'd9];

assign tmp_26_fu_893_p3 = temp_q0[32'd10];

assign tmp_27_fu_905_p3 = temp_q0[32'd11];

assign tmp_28_fu_917_p3 = temp_q0[32'd12];

assign tmp_29_fu_929_p3 = temp_q0[32'd13];

assign tmp_2_fu_1790_p2 = (p_shl1_cast_fu_1786_p1 - x3_cast1_fu_1774_p1);

assign tmp_2_mid1_fu_1844_p2 = (p_shl1_cast_mid1_fu_1840_p1 - x3_cast1_mid1_fu_1828_p1);

assign tmp_30_fu_941_p3 = temp_q0[32'd14];

assign tmp_30_mid2_fu_600_p1 = $unsigned(tmp_30_mid2_v_fu_596_p1);

assign tmp_30_mid2_v_fu_596_p1 = $signed(tmp_mid2_fu_588_p3);

assign tmp_31_fu_953_p3 = temp_q0[32'd15];

assign tmp_32_fu_965_p3 = temp_q0[32'd16];

assign tmp_33_fu_977_p3 = temp_q0[32'd17];

assign tmp_34_fu_989_p3 = temp_q0[32'd18];

assign tmp_35_fu_1001_p3 = temp_q0[32'd19];

assign tmp_36_fu_1013_p3 = temp_q0[32'd20];

assign tmp_37_fu_1025_p3 = temp_q0[32'd21];

assign tmp_38_fu_1037_p3 = temp_q0[32'd22];

assign tmp_39_fu_1049_p3 = temp_q0[32'd23];

assign tmp_40_fu_1061_p3 = temp_q0[32'd24];

assign tmp_41_fu_1073_p3 = temp_q0[32'd25];

assign tmp_42_fu_1085_p3 = temp_q0[32'd26];

assign tmp_43_fu_1097_p3 = temp_q0[32'd27];

assign tmp_44_fu_1109_p3 = temp_q0[32'd28];

assign tmp_45_fu_1121_p3 = temp_q0[32'd29];

assign tmp_46_fu_1133_p3 = temp_q0[32'd30];

assign tmp_47_fu_1145_p3 = temp_q0[32'd31];

assign tmp_48_fu_1157_p3 = temp_q0[32'd32];

assign tmp_49_fu_1169_p3 = temp_q0[32'd33];

assign tmp_4_fu_648_p2 = ((grp_fu_623_p2 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_50_fu_1181_p3 = temp_q0[32'd34];

assign tmp_51_fu_1193_p3 = temp_q0[32'd35];

assign tmp_52_fu_1205_p3 = temp_q0[32'd36];

assign tmp_53_fu_1217_p3 = temp_q0[32'd37];

assign tmp_54_fu_1229_p3 = temp_q0[32'd38];

assign tmp_55_fu_1241_p3 = temp_q0[32'd39];

assign tmp_56_fu_1253_p3 = temp_q0[32'd40];

assign tmp_57_fu_1265_p3 = temp_q0[32'd41];

assign tmp_58_fu_1277_p3 = temp_q0[32'd42];

assign tmp_59_fu_1289_p3 = temp_q0[32'd43];

assign tmp_5_cast_mid2_fu_1909_p1 = $unsigned(tmp_5_mid2_v_reg_2223);

assign tmp_5_mid2_fu_1862_p1 = $unsigned(tmp_5_mid2_v_fu_1858_p1);

assign tmp_5_mid2_v_fu_1858_p1 = tmp_5_mid2_v_v_fu_1850_p3;

assign tmp_5_mid2_v_v_fu_1850_p3 = ((exitcond3_fu_1808_p2[0:0] === 1'b1) ? tmp_2_mid1_fu_1844_p2 : tmp_2_fu_1790_p2);

assign tmp_60_fu_1301_p3 = temp_q0[32'd44];

assign tmp_61_fu_1313_p3 = temp_q0[32'd45];

assign tmp_62_fu_1325_p3 = temp_q0[32'd46];

assign tmp_63_fu_1337_p3 = temp_q0[32'd47];

assign tmp_64_fu_1349_p3 = temp_q0[32'd48];

assign tmp_65_fu_2028_p1 = temp_q1[7:0];

assign tmp_6_fu_773_p1 = tmp_5_reg_2171;

assign tmp_6_mid2_v_v_fu_753_p3 = ((exitcond2_fu_733_p2[0:0] === 1'b1) ? x2_s_fu_747_p2 : ap_phi_mux_x2_phi_fu_449_p4);

assign tmp_7_mid2_v_v_fu_1866_p3 = ((exitcond3_fu_1808_p2[0:0] === 1'b1) ? x3_s_fu_1822_p2 : ap_phi_mux_x3_phi_fu_482_p4);

assign tmp_9_fu_712_p1 = tmp_8_reg_2136;

assign tmp_fu_536_p2 = (p_shl_cast_fu_532_p1 - x_cast_fu_520_p1);

assign tmp_mid1_fu_582_p2 = (p_shl_cast_mid1_fu_578_p1 - x_cast_mid1_fu_566_p1);

assign tmp_mid2_fu_588_p3 = ((exitcond_fu_554_p2[0:0] === 1'b1) ? tmp_mid1_fu_582_p2 : tmp_fu_536_p2);

assign train_images1_fu_500_p4 = {{train_images[63:3]}};

assign x1_s_fu_686_p2 = (ap_phi_mux_x1_phi_fu_416_p4 + 4'd1);

assign x2_s_fu_747_p2 = (4'd1 + ap_phi_mux_x2_phi_fu_449_p4);

assign x3_cast1_fu_1774_p1 = ap_phi_mux_x3_phi_fu_482_p4;

assign x3_cast1_mid1_fu_1828_p1 = x3_s_fu_1822_p2;

assign x3_s_fu_1822_p2 = (ap_phi_mux_x3_phi_fu_482_p4 + 4'd1);

assign x_cast_fu_520_p1 = x_reg_379;

assign x_cast_mid1_fu_566_p1 = x_s_fu_560_p2;

assign x_mid2_fu_604_p3 = ((exitcond_fu_554_p2[0:0] === 1'b1) ? x_s_fu_560_p2 : x_reg_379);

assign x_s_fu_560_p2 = (x_reg_379 + 4'd1);

assign y1_1_fu_700_p2 = (y1_mid2_fu_678_p3 + 11'd1);

assign y1_mid2_fu_678_p3 = ((exitcond1_fu_672_p2[0:0] === 1'b1) ? 11'd0 : y1_reg_423);

assign y2_1_fu_761_p2 = (11'd1 + y2_mid2_fu_739_p3);

assign y2_mid2_fu_739_p3 = ((exitcond2_fu_733_p2[0:0] === 1'b1) ? 11'd0 : y2_reg_456);

assign y3_1_fu_2004_p2 = (y3_mid2_reg_2211 + 11'd1);

assign y3_mid2_fu_1814_p3 = ((exitcond3_fu_1808_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_y3_phi_fu_493_p4);

assign y_1_fu_635_p3 = ((exitcond_fu_554_p2[0:0] === 1'b1) ? 2'd1 : y_op_fu_629_p2);

assign y_op_fu_629_p2 = (y_reg_390 + 2'd1);

always @ (posedge ap_clk) begin
    gmem_addr_reg_2071[63:61] <= 3'b000;
    tmp_5_cast_mid2_reg_2256[32] <= 1'b0;
end

endmodule //digitrec_kernel_digitrec_kernel
