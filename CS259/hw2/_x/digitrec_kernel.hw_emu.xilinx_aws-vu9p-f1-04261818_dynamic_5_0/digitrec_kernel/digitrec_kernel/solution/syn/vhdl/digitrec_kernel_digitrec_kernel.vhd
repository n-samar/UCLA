-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2_AR71275_op
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_kernel_digitrec_kernel is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of digitrec_kernel_digitrec_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitrec_kernel_digitrec_kernel,hls_ip_2018_2_AR71275_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=414077,HLS_SYN_TPT=none,HLS_SYN_MEM=75,HLS_SYN_DSP=3,HLS_SYN_FF=2889,HLS_SYN_LUT=4275,HLS_VERSION=2018_2_AR71275_op}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_pp3_stage4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_pp3_stage5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_pp3_stage6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_pp3_stage7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp3_stage8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_pp3_stage13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_pp3_stage14 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage15 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage16 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage17 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage18 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage19 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage20 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_32 : STD_LOGIC_VECTOR (7 downto 0) := "00110010";
    constant ap_const_lv32_4650 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100011001010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal test_image : STD_LOGIC_VECTOR (63 downto 0);
    signal train_images : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten1_reg_2111 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_4_reg_2103 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_2077 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal tmp_15_reg_2107 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2107_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal exitcond_flatten3_reg_2202 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage8 : signal is "none";
    signal ap_block_pp3_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage9 : signal is "none";
    signal ap_block_pp3_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage11 : signal is "none";
    signal ap_block_pp3_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage18 : signal is "none";
    signal ap_block_pp3_stage18 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage12 : signal is "none";
    signal ap_block_pp3_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage19 : signal is "none";
    signal ap_block_pp3_stage19 : BOOLEAN;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal tmp_13_reg_2315 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage10 : signal is "none";
    signal ap_block_pp3_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage15 : signal is "none";
    signal ap_block_pp3_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage7 : signal is "none";
    signal ap_block_pp3_stage7 : BOOLEAN;
    signal exitcond_flatten3_reg_2202_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_ARVALID : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RREADY : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_367 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_sig_ioackin_gmem2_AWREADY : STD_LOGIC;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_sig_ioackin_gmem2_WREADY : STD_LOGIC;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_390 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten1_reg_401 : STD_LOGIC_VECTOR (14 downto 0);
    signal x1_reg_412 : STD_LOGIC_VECTOR (3 downto 0);
    signal y1_reg_423 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten2_reg_434 : STD_LOGIC_VECTOR (14 downto 0);
    signal x2_reg_445 : STD_LOGIC_VECTOR (3 downto 0);
    signal y2_reg_456 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten3_reg_467 : STD_LOGIC_VECTOR (14 downto 0);
    signal x3_reg_478 : STD_LOGIC_VECTOR (3 downto 0);
    signal y3_reg_489 : STD_LOGIC_VECTOR (10 downto 0);
    signal knn_mat_read_reg_2056 : STD_LOGIC_VECTOR (63 downto 0);
    signal test_image_read_reg_2066 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_2071 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2077_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_548_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_2081 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal x_mid2_fu_604_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem2_addr_reg_2092 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_2092_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_1_fu_635_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2107_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2107_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2107_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2107_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_flatten1_reg_2111_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_666_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal y1_mid2_fu_678_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal y1_mid2_reg_2120 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_mid2_v_v_fu_692_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_mid2_v_v_reg_2125 : STD_LOGIC_VECTOR (3 downto 0);
    signal y1_1_fu_700_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2032_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_reg_2136 : STD_LOGIC_VECTOR (14 downto 0);
    signal gmem_addr_read_reg_2141 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten2_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_2146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_flatten2_reg_2146_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_2146_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_2146_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_727_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal y2_mid2_fu_739_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal y2_mid2_reg_2155 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_mid2_v_v_fu_753_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_mid2_v_v_reg_2160 : STD_LOGIC_VECTOR (3 downto 0);
    signal y2_1_fu_761_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2040_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_2171 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal temp_addr_1_reg_2176 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_addr_1_reg_2176_pp2_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_1445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_reg_2182 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp13_fu_1535_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp13_reg_2187 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp25_fu_1625_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp25_reg_2192 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp36_fu_1725_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp36_reg_2197 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten3_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state35_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state56_pp3_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem2_ARREADY : STD_LOGIC;
    signal ap_block_state56_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next3_fu_1802_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next3_reg_2206 : STD_LOGIC_VECTOR (14 downto 0);
    signal y3_mid2_fu_1814_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal y3_mid2_reg_2211 : STD_LOGIC_VECTOR (10 downto 0);
    signal y3_mid2_reg_2211_pp3_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_mid2_v_v_fu_1850_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_mid2_v_v_reg_2217 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_mid2_v_fu_1858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid2_v_reg_2223 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_mid2_v_v_fu_1866_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_mid2_v_v_reg_2228 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem2_addr_1_reg_2234 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_2_reg_2240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state36_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state36_io : BOOLEAN;
    signal ap_block_state57_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal gmem2_addr_1_read_reg_2246 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state43_pp3_stage8_iter0 : BOOLEAN;
    signal ap_block_state64_pp3_stage8_iter1 : BOOLEAN;
    signal ap_block_pp3_stage8_11001 : BOOLEAN;
    signal gmem2_addr_2_read_reg_2251 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state44_pp3_stage9_iter0 : BOOLEAN;
    signal ap_block_state65_pp3_stage9_iter1 : BOOLEAN;
    signal ap_block_state65_io : BOOLEAN;
    signal ap_block_pp3_stage9_11001 : BOOLEAN;
    signal tmp_5_cast_mid2_fu_1909_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_cast_mid2_reg_2256 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_state45_pp3_stage10_iter0 : BOOLEAN;
    signal ap_block_state66_pp3_stage10_iter1 : BOOLEAN;
    signal ap_block_state66_io : BOOLEAN;
    signal ap_block_pp3_stage10_11001 : BOOLEAN;
    signal tmp_24_1_fu_1912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_1_reg_2261 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_3_reg_2266 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_4_reg_2272 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state46_pp3_stage11_iter0 : BOOLEAN;
    signal ap_block_state46_io : BOOLEAN;
    signal ap_block_state67_pp3_stage11_iter1 : BOOLEAN;
    signal ap_block_pp3_stage11_11001 : BOOLEAN;
    signal gmem2_addr_3_read_reg_2278 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state53_pp3_stage18_iter0 : BOOLEAN;
    signal ap_block_pp3_stage18_11001 : BOOLEAN;
    signal gmem2_addr_4_read_reg_2283 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state54_pp3_stage19_iter0 : BOOLEAN;
    signal ap_block_pp3_stage19_11001 : BOOLEAN;
    signal gmem2_addr_5_reg_2288 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp3_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage20 : signal is "none";
    signal ap_block_state55_pp3_stage20_iter0 : BOOLEAN;
    signal ap_block_pp3_stage20_11001 : BOOLEAN;
    signal y3_1_fu_2004_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y3_1_reg_2295 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2048_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_2300 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp3_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage6 : signal is "none";
    signal ap_block_state41_pp3_stage6_iter0 : BOOLEAN;
    signal ap_block_state62_pp3_stage6_iter1 : BOOLEAN;
    signal ap_block_pp3_stage6_11001 : BOOLEAN;
    signal ap_block_state42_pp3_stage7_iter0 : BOOLEAN;
    signal ap_block_state63_pp3_stage7_iter1 : BOOLEAN;
    signal ap_block_pp3_stage7_11001 : BOOLEAN;
    signal gmem2_addr_5_read_reg_2310 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_2022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_2028_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_reg_2319 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state35 : STD_LOGIC;
    signal ap_block_pp3_stage20_subdone : BOOLEAN;
    signal ap_block_state50_pp3_stage15_iter0 : BOOLEAN;
    signal ap_block_state71_pp3_stage15_iter1 : BOOLEAN;
    signal ap_block_pp3_stage15_subdone : BOOLEAN;
    signal temp_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_371_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_x1_phi_fu_416_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_x2_phi_fu_449_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten3_phi_fu_471_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_x3_phi_fu_482_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_y3_phi_fu_493_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_2015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum5_fu_612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum6_fu_1874_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum7_fu_1898_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum8_fu_1930_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum9_fu_1954_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_mat4_sum1_fu_1993_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage20 : BOOLEAN;
    signal ap_reg_ioackin_gmem2_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem2_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem2_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage1_01001 : BOOLEAN;
    signal ap_block_state37_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state58_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_pp3_stage2_01001 : BOOLEAN;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal ap_block_pp3_stage11_01001 : BOOLEAN;
    signal ap_block_state47_pp3_stage12_iter0 : BOOLEAN;
    signal ap_block_state68_pp3_stage12_iter1 : BOOLEAN;
    signal ap_block_pp3_stage12_01001 : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal ap_block_pp3_stage12_11001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp3_stage9_01001 : BOOLEAN;
    signal ap_block_pp3_stage15_11001 : BOOLEAN;
    signal ap_block_pp3_stage10_01001 : BOOLEAN;
    signal train_images1_fu_500_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_shl_fu_524_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_532_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_cast_fu_520_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_s_fu_560_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_mid1_fu_570_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_mid1_fu_578_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_cast_mid1_fu_566_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_582_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid2_fu_588_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_mid2_v_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_mid2_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_623_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_op_fu_629_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_643_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_623_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_s_fu_686_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x2_s_fu_747_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_777_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_785_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_809_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_821_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_833_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_857_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_869_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_893_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_917_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_929_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_941_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_953_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_989_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1013_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_1025_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1037_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1049_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1061_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1073_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1085_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1097_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1109_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1121_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1193_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1241_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_1253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_1289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_1313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_cast_fu_781_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_2_cast_fu_805_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp5_fu_1361_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_1_cast_fu_793_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_fu_1367_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_4_cast_fu_829_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_5_cast_fu_841_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp7_fu_1377_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_3_cast_fu_817_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_fu_1383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_cast_fu_1389_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp4_cast_fu_1373_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp3_fu_1393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_7_cast_fu_865_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_8_cast_fu_877_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp10_fu_1403_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_6_cast_fu_853_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp9_fu_1409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_cast_fu_901_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_10_cast_fu_913_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp12_fu_1419_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_9_cast_fu_889_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp11_fu_1425_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp11_cast_fu_1431_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp9_cast_fu_1415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp8_fu_1435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp8_cast_fu_1441_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_cast_fu_1399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_12_cast_fu_937_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_13_cast_fu_949_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp16_fu_1451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_11_cast_fu_925_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp15_fu_1457_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_15_cast_fu_973_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_16_cast_fu_985_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp18_fu_1467_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_14_cast_fu_961_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp17_fu_1473_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp17_cast_fu_1479_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp15_cast_fu_1463_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp14_fu_1483_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_18_cast_fu_1009_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_19_cast_fu_1021_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp21_fu_1493_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_17_cast_fu_997_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp20_fu_1499_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_21_cast_fu_1045_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_22_cast_fu_1057_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp23_fu_1509_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_20_cast_fu_1033_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp22_fu_1515_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp22_cast_fu_1521_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp20_cast_fu_1505_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp19_fu_1525_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp19_cast_fu_1531_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp14_cast_fu_1489_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_24_cast_fu_1081_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_25_cast_fu_1093_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp28_fu_1541_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_23_cast_fu_1069_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp27_fu_1547_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_27_cast_fu_1117_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_28_cast_fu_1129_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp30_fu_1557_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_26_cast_fu_1105_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp29_fu_1563_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp29_cast_fu_1569_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp27_cast_fu_1553_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp26_fu_1573_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_30_cast_fu_1153_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_31_cast_fu_1165_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp33_fu_1583_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_29_cast_fu_1141_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp32_fu_1589_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_33_cast_fu_1189_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_34_cast_fu_1201_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp35_fu_1599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_32_cast_fu_1177_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp34_fu_1605_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp34_cast_fu_1611_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp32_cast_fu_1595_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp31_fu_1615_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp31_cast_fu_1621_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp26_cast_fu_1579_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_36_cast_fu_1225_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_37_cast_fu_1237_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp39_fu_1631_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_35_cast_fu_1213_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp38_fu_1637_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_39_cast_fu_1261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_40_cast_fu_1273_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp41_fu_1647_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_38_cast_fu_1249_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp40_fu_1653_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp40_cast_fu_1659_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp38_cast_fu_1643_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp37_fu_1663_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_42_cast_fu_1297_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_43_cast_fu_1309_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp44_fu_1673_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_41_cast_fu_1285_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp43_fu_1679_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_44_cast_fu_1321_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_45_cast_fu_1333_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp46_fu_1689_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_46_cast_fu_1345_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_47_cast_fu_1357_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp47_fu_1699_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp47_cast_fu_1705_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp46_cast_fu_1695_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp45_fu_1709_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp43_cast_fu_1685_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp42_fu_1715_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp42_cast_fu_1721_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp37_cast_fu_1669_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp13_cast_fu_1734_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_fu_1731_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_1737_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp36_cast_fu_1750_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp25_cast_fu_1747_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp24_fu_1753_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp24_cast_fu_1759_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_1743_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal dis_1_s_fu_1763_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_fu_1778_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_1786_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x3_cast1_fu_1774_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_1808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x3_s_fu_1822_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_mid1_fu_1832_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_mid1_fu_1840_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x3_cast1_mid1_fu_1828_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_mid1_fu_1844_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_1790_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_mid2_fu_1862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_1_mid2_v_v_fu_1885_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_1_mid2_v_fu_1890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_1_mid2_fu_1894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_max_id_1_cast1_fu_1916_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_21_2_fu_1920_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_21_2_cast_fu_1926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_2_mid2_v_v_fu_1941_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_2_mid2_v_fu_1946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_2_mid2_fu_1950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_2_fu_1968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_max_id_1_cast_fu_1965_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_max_id_2_fu_1972_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_max_id_2_cast_fu_1980_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_1984_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_18_cast_fu_1989_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage6 : BOOLEAN;
    signal tmp_12_fu_2019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2032_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2032_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2032_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2040_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2040_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2040_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2048_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2048_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2048_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_623_ce : STD_LOGIC;
    signal grp_fu_643_ce : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_state38_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_state59_pp3_stage3_iter1 : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal ap_block_state39_pp3_stage4_iter0 : BOOLEAN;
    signal ap_block_state60_pp3_stage4_iter1 : BOOLEAN;
    signal ap_block_pp3_stage4_subdone : BOOLEAN;
    signal ap_block_pp3_stage4_11001 : BOOLEAN;
    signal ap_block_state40_pp3_stage5_iter0 : BOOLEAN;
    signal ap_block_state61_pp3_stage5_iter1 : BOOLEAN;
    signal ap_block_pp3_stage5_subdone : BOOLEAN;
    signal ap_block_pp3_stage5_11001 : BOOLEAN;
    signal ap_block_pp3_stage6_subdone : BOOLEAN;
    signal ap_block_pp3_stage7_subdone : BOOLEAN;
    signal ap_block_pp3_stage8_subdone : BOOLEAN;
    signal ap_block_pp3_stage9_subdone : BOOLEAN;
    signal ap_block_pp3_stage10_subdone : BOOLEAN;
    signal ap_block_pp3_stage11_subdone : BOOLEAN;
    signal ap_block_pp3_stage12_subdone : BOOLEAN;
    signal ap_block_state48_pp3_stage13_iter0 : BOOLEAN;
    signal ap_block_state69_pp3_stage13_iter1 : BOOLEAN;
    signal ap_block_pp3_stage13_subdone : BOOLEAN;
    signal ap_block_pp3_stage13_11001 : BOOLEAN;
    signal ap_block_state49_pp3_stage14_iter0 : BOOLEAN;
    signal ap_block_state70_pp3_stage14_iter1 : BOOLEAN;
    signal ap_block_pp3_stage14_subdone : BOOLEAN;
    signal ap_block_pp3_stage14_11001 : BOOLEAN;
    signal ap_block_state51_pp3_stage16_iter0 : BOOLEAN;
    signal ap_block_pp3_stage16_subdone : BOOLEAN;
    signal ap_block_pp3_stage16_11001 : BOOLEAN;
    signal ap_block_state52_pp3_stage17_iter0 : BOOLEAN;
    signal ap_block_pp3_stage17_subdone : BOOLEAN;
    signal ap_block_pp3_stage17_11001 : BOOLEAN;
    signal ap_block_pp3_stage18_subdone : BOOLEAN;
    signal ap_block_pp3_stage19_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_2032_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2032_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2040_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2040_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2048_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2048_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_1167 : BOOLEAN;
    signal ap_condition_1180 : BOOLEAN;
    signal ap_condition_1203 : BOOLEAN;
    signal ap_condition_1217 : BOOLEAN;
    signal ap_condition_1241 : BOOLEAN;
    signal ap_condition_1129 : BOOLEAN;
    signal ap_condition_1252 : BOOLEAN;
    signal ap_condition_1143 : BOOLEAN;
    signal ap_condition_1273 : BOOLEAN;

    component digitrec_kernel_digitrec_kernel_urem_5ns_3ns_5_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_mac_muladd_12ns_4ns_11ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        test_image : OUT STD_LOGIC_VECTOR (63 downto 0);
        train_images : OUT STD_LOGIC_VECTOR (63 downto 0);
        knn_mat : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    digitrec_kernel_control_s_axi_U : component digitrec_kernel_digitrec_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        test_image => test_image,
        train_images => train_images,
        knn_mat => knn_mat);

    digitrec_kernel_gmem_m_axi_U : component digitrec_kernel_digitrec_kernel_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_2071,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_4650,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    digitrec_kernel_gmem2_m_axi_U : component digitrec_kernel_digitrec_kernel_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => gmem2_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => gmem2_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => gmem2_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => gmem2_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    temp_U : component digitrec_kernel_digitrec_kernel_temp
    generic map (
        DataWidth => 64,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => temp_d1,
        q1 => temp_q1);

    digitrec_kernel_urem_5ns_3ns_5_9_1_U1 : component digitrec_kernel_digitrec_kernel_urem_5ns_3ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_371_p4,
        din1 => grp_fu_623_p1,
        ce => grp_fu_623_ce,
        dout => grp_fu_623_p2);

    digitrec_kernel_urem_5ns_3ns_5_9_1_U2 : component digitrec_kernel_digitrec_kernel_urem_5ns_3ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_next_reg_2081,
        din1 => grp_fu_643_p1,
        ce => grp_fu_643_ce,
        dout => grp_fu_643_p2);

    digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1_U3 : component digitrec_kernel_digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 12,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_2032_p0,
        din1 => grp_fu_2032_p1,
        din2 => grp_fu_2032_p2,
        dout => grp_fu_2032_p3);

    digitrec_kernel_mac_muladd_12ns_4ns_11ns_15_1_1_U4 : component digitrec_kernel_digitrec_kernel_mac_muladd_12ns_4ns_11ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 4,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_2040_p0,
        din1 => grp_fu_2040_p1,
        din2 => grp_fu_2040_p2,
        dout => grp_fu_2040_p3);

    digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1_U5 : component digitrec_kernel_digitrec_kernel_mac_muladd_4ns_12ns_11ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 12,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_2048_p0,
        din1 => grp_fu_2048_p1,
        din2 => grp_fu_2048_p2,
        dout => grp_fu_2048_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state29);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state35) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state35) and (((ap_const_logic_1 = ap_CS_fsm_pp3_stage20) and (ap_const_boolean_0 = ap_block_pp3_stage20_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_const_boolean_0 = ap_block_pp3_stage15_subdone))))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state35);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage20) and (ap_const_boolean_0 = ap_block_pp3_stage20_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_const_boolean_0 = ap_block_pp3_stage15_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem2_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage12) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage12_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_gmem2_ARREADY <= ap_const_logic_0;
                elsif ((((gmem2_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001)) or ((gmem2_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage12) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage12_01001)) or ((gmem2_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage11_01001)) or ((gmem2_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_01001)) or ((gmem2_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_01001)))) then 
                    ap_reg_ioackin_gmem2_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem2_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem2_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage9_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (tmp_13_reg_2315 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_4_reg_2103 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem2_AWREADY <= ap_const_logic_0;
                elsif ((((gmem2_AWREADY = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage9_01001)) or ((gmem2_AWREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_4_reg_2103 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
                    ap_reg_ioackin_gmem2_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem2_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem2_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_gmem2_WREADY <= ap_const_logic_0;
                elsif ((((gmem2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage10_01001)) or ((gmem2_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
                    ap_reg_ioackin_gmem2_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    if ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                    elsif ((gmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    indvar_flatten1_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                indvar_flatten1_reg_401 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_401 <= indvar_flatten_next1_fu_666_p2;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                indvar_flatten2_reg_434 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_434 <= indvar_flatten_next2_fu_727_p2;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvar_flatten3_reg_467 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
                indvar_flatten3_reg_467 <= indvar_flatten_next3_reg_2206;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_2077 = ap_const_lv1_0))) then 
                indvar_flatten_reg_367 <= indvar_flatten_next_reg_2081;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_367 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x1_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                x1_reg_412 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0))) then 
                x1_reg_412 <= tmp_1_mid2_v_v_reg_2125;
            end if; 
        end if;
    end process;

    x2_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                x2_reg_445 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_reg_2146 = ap_const_lv1_0))) then 
                x2_reg_445 <= tmp_6_mid2_v_v_reg_2160;
            end if; 
        end if;
    end process;

    x3_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                x3_reg_478 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
                x3_reg_478 <= tmp_7_mid2_v_v_reg_2228;
            end if; 
        end if;
    end process;

    x_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_542_p2 = ap_const_lv1_0))) then 
                x_reg_379 <= x_mid2_fu_604_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_379 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y1_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                y1_reg_423 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_0))) then 
                y1_reg_423 <= y1_1_fu_700_p2;
            end if; 
        end if;
    end process;

    y2_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                y2_reg_456 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_0))) then 
                y2_reg_456 <= y2_1_fu_761_p2;
            end if; 
        end if;
    end process;

    y3_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                y3_reg_489 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
                y3_reg_489 <= y3_1_reg_2295;
            end if; 
        end if;
    end process;

    y_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_542_p2 = ap_const_lv1_0))) then 
                y_reg_390 <= y_1_fu_635_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_reg_390 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten1_reg_2111 <= exitcond_flatten1_fu_660_p2;
                exitcond_flatten1_reg_2111_pp1_iter1_reg <= exitcond_flatten1_reg_2111;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_flatten2_reg_2146 <= exitcond_flatten2_fu_721_p2;
                exitcond_flatten2_reg_2146_pp2_iter1_reg <= exitcond_flatten2_reg_2146;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond_flatten2_reg_2146_pp2_iter2_reg <= exitcond_flatten2_reg_2146_pp2_iter1_reg;
                exitcond_flatten2_reg_2146_pp2_iter3_reg <= exitcond_flatten2_reg_2146_pp2_iter2_reg;
                temp_addr_1_reg_2176_pp2_iter3_reg <= temp_addr_1_reg_2176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_flatten3_reg_2202 <= exitcond_flatten3_fu_1796_p2;
                exitcond_flatten3_reg_2202_pp3_iter1_reg <= exitcond_flatten3_reg_2202;
                tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg <= tmp_7_mid2_v_v_reg_2228;
                y3_mid2_reg_2211_pp3_iter1_reg <= y3_mid2_reg_2211;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_2077 <= exitcond_flatten_fu_542_p2;
                exitcond_flatten_reg_2077_pp0_iter1_reg <= exitcond_flatten_reg_2077;
                gmem2_addr_reg_2092_pp0_iter1_reg <= gmem2_addr_reg_2092;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_2077_pp0_iter2_reg <= exitcond_flatten_reg_2077_pp0_iter1_reg;
                exitcond_flatten_reg_2077_pp0_iter3_reg <= exitcond_flatten_reg_2077_pp0_iter2_reg;
                exitcond_flatten_reg_2077_pp0_iter4_reg <= exitcond_flatten_reg_2077_pp0_iter3_reg;
                exitcond_flatten_reg_2077_pp0_iter5_reg <= exitcond_flatten_reg_2077_pp0_iter4_reg;
                exitcond_flatten_reg_2077_pp0_iter6_reg <= exitcond_flatten_reg_2077_pp0_iter5_reg;
                exitcond_flatten_reg_2077_pp0_iter7_reg <= exitcond_flatten_reg_2077_pp0_iter6_reg;
                exitcond_flatten_reg_2077_pp0_iter8_reg <= exitcond_flatten_reg_2077_pp0_iter7_reg;
                exitcond_flatten_reg_2077_pp0_iter9_reg <= exitcond_flatten_reg_2077_pp0_iter8_reg;
                gmem2_addr_reg_2092_pp0_iter2_reg <= gmem2_addr_reg_2092_pp0_iter1_reg;
                gmem2_addr_reg_2092_pp0_iter3_reg <= gmem2_addr_reg_2092_pp0_iter2_reg;
                gmem2_addr_reg_2092_pp0_iter4_reg <= gmem2_addr_reg_2092_pp0_iter3_reg;
                gmem2_addr_reg_2092_pp0_iter5_reg <= gmem2_addr_reg_2092_pp0_iter4_reg;
                gmem2_addr_reg_2092_pp0_iter6_reg <= gmem2_addr_reg_2092_pp0_iter5_reg;
                gmem2_addr_reg_2092_pp0_iter7_reg <= gmem2_addr_reg_2092_pp0_iter6_reg;
                gmem2_addr_reg_2092_pp0_iter8_reg <= gmem2_addr_reg_2092_pp0_iter7_reg;
                tmp_15_reg_2107_pp0_iter10_reg <= tmp_15_reg_2107;
                tmp_15_reg_2107_pp0_iter11_reg <= tmp_15_reg_2107_pp0_iter10_reg;
                tmp_15_reg_2107_pp0_iter12_reg <= tmp_15_reg_2107_pp0_iter11_reg;
                tmp_15_reg_2107_pp0_iter13_reg <= tmp_15_reg_2107_pp0_iter12_reg;
                tmp_15_reg_2107_pp0_iter14_reg <= tmp_15_reg_2107_pp0_iter13_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage8) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_1_read_reg_2246 <= gmem2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_fu_1796_p2 = ap_const_lv1_0))) then
                gmem2_addr_1_reg_2234 <= knn_mat4_sum6_fu_1874_p2;
                tmp_5_mid2_v_reg_2223 <= tmp_5_mid2_v_fu_1858_p1;
                tmp_5_mid2_v_v_reg_2217 <= tmp_5_mid2_v_v_fu_1850_p3;
                y3_mid2_reg_2211 <= y3_mid2_fu_1814_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_2_read_reg_2251 <= gmem2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_2_reg_2240 <= knn_mat4_sum7_fu_1898_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage18) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_3_read_reg_2278 <= gmem2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_3_reg_2266 <= knn_mat4_sum8_fu_1930_p2;
                tmp_24_1_reg_2261 <= tmp_24_1_fu_1912_p2;
                    tmp_5_cast_mid2_reg_2256(31 downto 0) <= tmp_5_cast_mid2_fu_1909_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage19) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_4_read_reg_2283 <= gmem2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_4_reg_2272 <= knn_mat4_sum9_fu_1954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage7) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0))) then
                gmem2_addr_5_read_reg_2310 <= gmem2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage20) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                gmem2_addr_5_reg_2288 <= knn_mat4_sum1_fu_1993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_542_p2 = ap_const_lv1_0))) then
                gmem2_addr_reg_2092 <= knn_mat4_sum5_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0))) then
                gmem_addr_read_reg_2141 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    gmem_addr_reg_2071(60 downto 0) <= tmp_1_fu_510_p1(60 downto 0);
                knn_mat_read_reg_2056 <= knn_mat;
                test_image_read_reg_2066 <= test_image;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                indvar_flatten_next3_reg_2206 <= indvar_flatten_next3_fu_1802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_2081 <= indvar_flatten_next_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten2_reg_2146_pp2_iter1_reg = ap_const_lv1_0))) then
                temp_addr_1_reg_2176 <= tmp_6_fu_773_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_flatten2_reg_2146_pp2_iter2_reg = ap_const_lv1_0))) then
                tmp13_reg_2187 <= tmp13_fu_1535_p2;
                tmp25_reg_2192 <= tmp25_fu_1625_p2;
                tmp2_reg_2182 <= tmp2_fu_1445_p2;
                tmp36_reg_2197 <= tmp36_fu_1725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage8) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0))) then
                tmp_13_reg_2315 <= tmp_13_fu_2022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_2077_pp0_iter8_reg = ap_const_lv1_0))) then
                tmp_15_reg_2107 <= tmp_15_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_0))) then
                tmp_1_mid2_v_v_reg_2125 <= tmp_1_mid2_v_v_fu_692_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_2077_pp0_iter7_reg = ap_const_lv1_0))) then
                tmp_4_reg_2103 <= tmp_4_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_reg_2146 = ap_const_lv1_0))) then
                tmp_5_reg_2171 <= grp_fu_2040_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage8) and (tmp_13_fu_2022_p2 = ap_const_lv1_1))) then
                tmp_65_reg_2319 <= tmp_65_fu_2028_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_0))) then
                tmp_6_mid2_v_v_reg_2160 <= tmp_6_mid2_v_v_fu_753_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_1796_p2 = ap_const_lv1_0))) then
                tmp_7_mid2_v_v_reg_2228 <= tmp_7_mid2_v_v_fu_1866_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0))) then
                tmp_7_reg_2300 <= grp_fu_2048_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0))) then
                tmp_8_reg_2136 <= grp_fu_2032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_0))) then
                y1_mid2_reg_2120 <= y1_mid2_fu_678_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_0))) then
                y2_mid2_reg_2155 <= y2_mid2_fu_739_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage20) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
                y3_1_reg_2295 <= y3_1_fu_2004_p2;
            end if;
        end if;
    end process;
    gmem_addr_reg_2071(63 downto 61) <= "000";
    tmp_5_cast_mid2_reg_2256(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter15, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage15, exitcond_flatten_fu_542_p2, ap_enable_reg_pp0_iter0, exitcond_flatten1_fu_660_p2, ap_enable_reg_pp1_iter0, exitcond_flatten2_fu_721_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, exitcond_flatten3_fu_1796_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter14, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_block_pp3_stage0_subdone, ap_block_pp3_stage20_subdone, ap_block_pp3_stage15_subdone, ap_sig_ioackin_gmem_ARREADY, ap_block_pp3_stage1_subdone, ap_block_pp3_stage2_subdone, ap_block_pp3_stage3_subdone, ap_block_pp3_stage4_subdone, ap_block_pp3_stage5_subdone, ap_block_pp3_stage6_subdone, ap_block_pp3_stage7_subdone, ap_block_pp3_stage8_subdone, ap_block_pp3_stage9_subdone, ap_block_pp3_stage10_subdone, ap_block_pp3_stage11_subdone, ap_block_pp3_stage12_subdone, ap_block_pp3_stage13_subdone, ap_block_pp3_stage14_subdone, ap_block_pp3_stage16_subdone, ap_block_pp3_stage17_subdone, ap_block_pp3_stage18_subdone, ap_block_pp3_stage19_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_542_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_542_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_660_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond_flatten2_fu_721_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_1796_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_1796_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_pp3_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                end if;
            when ap_ST_fsm_pp3_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                end if;
            when ap_ST_fsm_pp3_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage6;
                end if;
            when ap_ST_fsm_pp3_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage7;
                end if;
            when ap_ST_fsm_pp3_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage8;
                end if;
            when ap_ST_fsm_pp3_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage9;
                end if;
            when ap_ST_fsm_pp3_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage10;
                end if;
            when ap_ST_fsm_pp3_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage11;
                end if;
            when ap_ST_fsm_pp3_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage12;
                end if;
            when ap_ST_fsm_pp3_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage13;
                end if;
            when ap_ST_fsm_pp3_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage14;
                end if;
            when ap_ST_fsm_pp3_stage15 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage15_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage15_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage16;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage15_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage15;
                end if;
            when ap_ST_fsm_pp3_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage16;
                end if;
            when ap_ST_fsm_pp3_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage17;
                end if;
            when ap_ST_fsm_pp3_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage18;
                end if;
            when ap_ST_fsm_pp3_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage19;
                end if;
            when ap_ST_fsm_pp3_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage20;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(14);
    ap_CS_fsm_pp3_stage10 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage11 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage12 <= ap_CS_fsm(25);
    ap_CS_fsm_pp3_stage15 <= ap_CS_fsm(28);
    ap_CS_fsm_pp3_stage18 <= ap_CS_fsm(31);
    ap_CS_fsm_pp3_stage19 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(15);
    ap_CS_fsm_pp3_stage20 <= ap_CS_fsm(33);
    ap_CS_fsm_pp3_stage6 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage7 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage8 <= ap_CS_fsm(21);
    ap_CS_fsm_pp3_stage9 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(2);
    ap_CS_fsm_state24 <= ap_CS_fsm(8);
    ap_CS_fsm_state28 <= ap_CS_fsm(10);
    ap_CS_fsm_state34 <= ap_CS_fsm(12);
    ap_CS_fsm_state72 <= ap_CS_fsm(34);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter15, tmp_15_reg_2107_pp0_iter14_reg, gmem2_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((gmem2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, tmp_15_reg_2107_pp0_iter14_reg, gmem2_BVALID, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, tmp_15_reg_2107_pp0_iter14_reg, gmem2_BVALID, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_2111, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_2111, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state56_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state56_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage10_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage10_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state66_io)
    begin
                ap_block_pp3_stage10_11001 <= ((ap_const_boolean_1 = ap_block_state66_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage10_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state66_io)
    begin
                ap_block_pp3_stage10_subdone <= ((ap_const_boolean_1 = ap_block_state66_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage11_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage11_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state46_io)
    begin
                ap_block_pp3_stage11_11001 <= ((ap_const_boolean_1 = ap_block_state46_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage11_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state46_io)
    begin
                ap_block_pp3_stage11_subdone <= ((ap_const_boolean_1 = ap_block_state46_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage12_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage12_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state47_io)
    begin
                ap_block_pp3_stage12_11001 <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage12_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state47_io)
    begin
                ap_block_pp3_stage12_subdone <= ((ap_const_boolean_1 = ap_block_state47_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage15_11001_assign_proc : process(ap_enable_reg_pp3_iter1, tmp_13_reg_2315, gmem2_BVALID)
    begin
                ap_block_pp3_stage15_11001 <= ((gmem2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1));
    end process;


    ap_block_pp3_stage15_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, tmp_13_reg_2315, gmem2_BVALID)
    begin
                ap_block_pp3_stage15_subdone <= ((gmem2_BVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1));
    end process;

        ap_block_pp3_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage18_11001_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage18_11001 <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage18_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage18_subdone <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage19_11001_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage19_11001 <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage19_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage19_subdone <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage1_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state36_io)
    begin
                ap_block_pp3_stage1_11001 <= ((ap_const_boolean_1 = ap_block_state36_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage1_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state36_io)
    begin
                ap_block_pp3_stage1_subdone <= ((ap_const_boolean_1 = ap_block_state36_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage2_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state37_io)
    begin
                ap_block_pp3_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage2_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state37_io)
    begin
                ap_block_pp3_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage7_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond_flatten3_reg_2202_pp3_iter1_reg, gmem2_RVALID)
    begin
                ap_block_pp3_stage7_11001 <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage7_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond_flatten3_reg_2202_pp3_iter1_reg, gmem2_RVALID)
    begin
                ap_block_pp3_stage7_subdone <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage8_11001_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage8_11001 <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage8_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage8_subdone <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage9_01001_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_pp3_stage9_01001 <= ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage9_11001_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, ap_enable_reg_pp3_iter1, gmem2_RVALID, ap_block_state65_io)
    begin
                ap_block_pp3_stage9_11001 <= (((ap_const_boolean_1 = ap_block_state65_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)));
    end process;


    ap_block_pp3_stage9_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, ap_enable_reg_pp3_iter1, gmem2_RVALID, ap_block_state65_io)
    begin
                ap_block_pp3_stage9_subdone <= (((ap_const_boolean_1 = ap_block_state65_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((gmem2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(tmp_4_reg_2103, ap_sig_ioackin_gmem2_AWREADY)
    begin
                ap_block_state11_io <= ((ap_sig_ioackin_gmem2_AWREADY = ap_const_logic_0) and (tmp_4_reg_2103 = ap_const_lv1_1));
    end process;

        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(exitcond_flatten_reg_2077_pp0_iter9_reg, ap_sig_ioackin_gmem2_WREADY)
    begin
                ap_block_state12_io <= ((ap_sig_ioackin_gmem2_WREADY = ap_const_logic_0) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter15_assign_proc : process(tmp_15_reg_2107_pp0_iter14_reg, gmem2_BVALID)
    begin
                ap_block_state17_pp0_stage0_iter15 <= ((gmem2_BVALID = ap_const_logic_0) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1));
    end process;

        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter1_assign_proc : process(exitcond_flatten1_reg_2111, gmem_RVALID)
    begin
                ap_block_state26_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0));
    end process;

        ap_block_state27_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_io_assign_proc : process(exitcond_flatten3_reg_2202, ap_sig_ioackin_gmem2_ARREADY)
    begin
                ap_block_state36_io <= ((ap_sig_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state36_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(exitcond_flatten3_reg_2202, ap_sig_ioackin_gmem2_ARREADY)
    begin
                ap_block_state37_io <= ((ap_sig_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state37_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_pp3_stage8_iter0_assign_proc : process(exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_state43_pp3_stage8_iter0 <= ((gmem2_RVALID = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_state44_pp3_stage9_iter0_assign_proc : process(exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_state44_pp3_stage9_iter0 <= ((gmem2_RVALID = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state45_pp3_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state46_io_assign_proc : process(exitcond_flatten3_reg_2202, ap_sig_ioackin_gmem2_ARREADY)
    begin
                ap_block_state46_io <= ((ap_sig_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state46_pp3_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_io_assign_proc : process(exitcond_flatten3_reg_2202, ap_sig_ioackin_gmem2_ARREADY)
    begin
                ap_block_state47_io <= ((ap_sig_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state47_pp3_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_pp3_stage18_iter0_assign_proc : process(exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_state53_pp3_stage18_iter0 <= ((gmem2_RVALID = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;


    ap_block_state54_pp3_stage19_iter0_assign_proc : process(exitcond_flatten3_reg_2202, gmem2_RVALID)
    begin
                ap_block_state54_pp3_stage19_iter0 <= ((gmem2_RVALID = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state55_pp3_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state56_io_assign_proc : process(exitcond_flatten3_reg_2202, ap_sig_ioackin_gmem2_ARREADY)
    begin
                ap_block_state56_io <= ((ap_sig_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0));
    end process;

        ap_block_state56_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp3_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp3_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state63_pp3_stage7_iter1_assign_proc : process(exitcond_flatten3_reg_2202_pp3_iter1_reg, gmem2_RVALID)
    begin
                ap_block_state63_pp3_stage7_iter1 <= ((gmem2_RVALID = ap_const_logic_0) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state64_pp3_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state65_io_assign_proc : process(tmp_13_reg_2315, ap_sig_ioackin_gmem2_AWREADY)
    begin
                ap_block_state65_io <= ((ap_sig_ioackin_gmem2_AWREADY = ap_const_logic_0) and (tmp_13_reg_2315 = ap_const_lv1_1));
    end process;

        ap_block_state65_pp3_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_io_assign_proc : process(tmp_13_reg_2315, ap_sig_ioackin_gmem2_WREADY)
    begin
                ap_block_state66_io <= ((ap_sig_ioackin_gmem2_WREADY = ap_const_logic_0) and (tmp_13_reg_2315 = ap_const_lv1_1));
    end process;

        ap_block_state66_pp3_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp3_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp3_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp3_stage13_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp3_stage14_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state71_pp3_stage15_iter1_assign_proc : process(tmp_13_reg_2315, gmem2_BVALID)
    begin
                ap_block_state71_pp3_stage15_iter1 <= ((gmem2_BVALID = ap_const_logic_0) and (tmp_13_reg_2315 = ap_const_lv1_1));
    end process;

        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1129_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_4_reg_2103, ap_block_pp0_stage0_01001)
    begin
                ap_condition_1129 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_4_reg_2103 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001));
    end process;


    ap_condition_1143_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten_reg_2077_pp0_iter9_reg, ap_block_pp0_stage0_01001)
    begin
                ap_condition_1143 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001));
    end process;


    ap_condition_1167_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_01001)
    begin
                ap_condition_1167 <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_01001));
    end process;


    ap_condition_1180_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_01001)
    begin
                ap_condition_1180 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage2_01001));
    end process;


    ap_condition_1203_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage11, ap_block_pp3_stage11_01001)
    begin
                ap_condition_1203 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage11_01001));
    end process;


    ap_condition_1217_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage12, ap_block_pp3_stage12_01001)
    begin
                ap_condition_1217 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage12) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage12_01001));
    end process;


    ap_condition_1241_assign_proc : process(ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_01001)
    begin
                ap_condition_1241 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001));
    end process;


    ap_condition_1252_assign_proc : process(ap_CS_fsm_pp3_stage9, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_block_pp3_stage9_01001)
    begin
                ap_condition_1252 <= ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage9_01001));
    end process;


    ap_condition_1273_assign_proc : process(ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_CS_fsm_pp3_stage10, ap_block_pp3_stage10_01001)
    begin
                ap_condition_1273 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage10_01001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_542_p2)
    begin
        if ((exitcond_flatten_fu_542_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(exitcond_flatten1_fu_660_p2)
    begin
        if ((exitcond_flatten1_fu_660_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(exitcond_flatten2_fu_721_p2)
    begin
        if ((exitcond_flatten2_fu_721_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state35_assign_proc : process(exitcond_flatten3_fu_1796_p2)
    begin
        if ((exitcond_flatten3_fu_1796_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten3_phi_fu_471_p4_assign_proc : process(exitcond_flatten3_reg_2202, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, indvar_flatten3_reg_467, indvar_flatten_next3_reg_2206)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten3_phi_fu_471_p4 <= indvar_flatten_next3_reg_2206;
        else 
            ap_phi_mux_indvar_flatten3_phi_fu_471_p4 <= indvar_flatten3_reg_467;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_371_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_2077, indvar_flatten_reg_367, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_2081, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_2077 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_371_p4 <= indvar_flatten_next_reg_2081;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_371_p4 <= indvar_flatten_reg_367;
        end if; 
    end process;


    ap_phi_mux_x1_phi_fu_416_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_2111, x1_reg_412, tmp_1_mid2_v_v_reg_2125)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_x1_phi_fu_416_p4 <= tmp_1_mid2_v_v_reg_2125;
        else 
            ap_phi_mux_x1_phi_fu_416_p4 <= x1_reg_412;
        end if; 
    end process;


    ap_phi_mux_x2_phi_fu_449_p4_assign_proc : process(x2_reg_445, exitcond_flatten2_reg_2146, ap_CS_fsm_pp2_stage0, tmp_6_mid2_v_v_reg_2160, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_flatten2_reg_2146 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_x2_phi_fu_449_p4 <= tmp_6_mid2_v_v_reg_2160;
        else 
            ap_phi_mux_x2_phi_fu_449_p4 <= x2_reg_445;
        end if; 
    end process;


    ap_phi_mux_x3_phi_fu_482_p4_assign_proc : process(exitcond_flatten3_reg_2202, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, x3_reg_478, tmp_7_mid2_v_v_reg_2228)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
            ap_phi_mux_x3_phi_fu_482_p4 <= tmp_7_mid2_v_v_reg_2228;
        else 
            ap_phi_mux_x3_phi_fu_482_p4 <= x3_reg_478;
        end if; 
    end process;


    ap_phi_mux_y3_phi_fu_493_p4_assign_proc : process(exitcond_flatten3_reg_2202, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, y3_reg_489, y3_1_reg_2295)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then 
            ap_phi_mux_y3_phi_fu_493_p4 <= y3_1_reg_2295;
        else 
            ap_phi_mux_y3_phi_fu_493_p4 <= y3_reg_489;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem2_ARREADY_assign_proc : process(gmem2_ARREADY, ap_reg_ioackin_gmem2_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem2_ARREADY <= gmem2_ARREADY;
        else 
            ap_sig_ioackin_gmem2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem2_AWREADY_assign_proc : process(gmem2_AWREADY, ap_reg_ioackin_gmem2_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem2_AWREADY <= gmem2_AWREADY;
        else 
            ap_sig_ioackin_gmem2_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem2_WREADY_assign_proc : process(gmem2_WREADY, ap_reg_ioackin_gmem2_WREADY)
    begin
        if ((ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem2_WREADY <= gmem2_WREADY;
        else 
            ap_sig_ioackin_gmem2_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    dis_1_s_fu_1763_p2 <= std_logic_vector(unsigned(tmp24_cast_fu_1759_p1) + unsigned(tmp1_cast_fu_1743_p1));
    exitcond1_fu_672_p2 <= "1" when (y1_reg_423 = ap_const_lv11_708) else "0";
    exitcond2_fu_733_p2 <= "1" when (y2_reg_456 = ap_const_lv11_708) else "0";
    exitcond3_fu_1808_p2 <= "1" when (ap_phi_mux_y3_phi_fu_493_p4 = ap_const_lv11_708) else "0";
    exitcond_flatten1_fu_660_p2 <= "1" when (indvar_flatten1_reg_401 = ap_const_lv15_4650) else "0";
    exitcond_flatten2_fu_721_p2 <= "1" when (indvar_flatten2_reg_434 = ap_const_lv15_4650) else "0";
    exitcond_flatten3_fu_1796_p2 <= "1" when (ap_phi_mux_indvar_flatten3_phi_fu_471_p4 = ap_const_lv15_4650) else "0";
    exitcond_flatten_fu_542_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_371_p4 = ap_const_lv5_1E) else "0";
    exitcond_fu_554_p2 <= "1" when (y_reg_390 = ap_const_lv2_3) else "0";

    gmem2_ARADDR_assign_proc : process(exitcond_flatten3_reg_2202, gmem2_addr_1_reg_2234, gmem2_addr_2_reg_2240, gmem2_addr_3_reg_2266, gmem2_addr_4_reg_2272, gmem2_addr_5_reg_2288, ap_reg_ioackin_gmem2_ARREADY, ap_condition_1167, ap_condition_1180, ap_condition_1203, ap_condition_1217, ap_condition_1241)
    begin
        if (((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0))) then
            if ((ap_const_boolean_1 = ap_condition_1241)) then 
                gmem2_ARADDR <= gmem2_addr_5_reg_2288;
            elsif ((ap_const_boolean_1 = ap_condition_1217)) then 
                gmem2_ARADDR <= gmem2_addr_4_reg_2272;
            elsif ((ap_const_boolean_1 = ap_condition_1203)) then 
                gmem2_ARADDR <= gmem2_addr_3_reg_2266;
            elsif ((ap_const_boolean_1 = ap_condition_1180)) then 
                gmem2_ARADDR <= gmem2_addr_2_reg_2240;
            elsif ((ap_const_boolean_1 = ap_condition_1167)) then 
                gmem2_ARADDR <= gmem2_addr_1_reg_2234;
            else 
                gmem2_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_ARVALID_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp3_stage11, ap_CS_fsm_pp3_stage12, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_reg_ioackin_gmem2_ARREADY, ap_block_pp3_stage1_01001, ap_block_pp3_stage2_01001, ap_block_pp3_stage11_01001, ap_block_pp3_stage12_01001, ap_block_pp3_stage0_01001)
    begin
        if ((((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001)) or ((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage12) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage12_01001)) or ((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage11_01001)) or ((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_01001)) or ((ap_reg_ioackin_gmem2_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_01001)))) then 
            gmem2_ARVALID <= ap_const_logic_1;
        else 
            gmem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_AWADDR_assign_proc : process(gmem2_addr_reg_2092_pp0_iter8_reg, gmem2_addr_5_reg_2288, ap_reg_ioackin_gmem2_AWREADY, ap_condition_1129, ap_condition_1252)
    begin
        if ((ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_1252)) then 
                gmem2_AWADDR <= gmem2_addr_5_reg_2288;
            elsif ((ap_const_boolean_1 = ap_condition_1129)) then 
                gmem2_AWADDR <= gmem2_addr_reg_2092_pp0_iter8_reg;
            else 
                gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWLEN_assign_proc : process(ap_reg_ioackin_gmem2_AWREADY, ap_condition_1129, ap_condition_1252)
    begin
        if ((ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_1252)) then 
                gmem2_AWLEN <= ap_const_lv32_1;
            elsif ((ap_const_boolean_1 = ap_condition_1129)) then 
                gmem2_AWLEN <= ap_const_lv32_3;
            else 
                gmem2_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_4_reg_2103, ap_CS_fsm_pp3_stage9, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_reg_ioackin_gmem2_AWREADY, ap_block_pp0_stage0_01001, ap_block_pp3_stage9_01001)
    begin
        if ((((ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage9_01001)) or ((ap_reg_ioackin_gmem2_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_4_reg_2103 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_enable_reg_pp0_iter15, tmp_15_reg_2107_pp0_iter14_reg, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_CS_fsm_pp3_stage15, ap_block_pp0_stage0_11001, ap_block_pp3_stage15_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage15_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1)))) then 
            gmem2_BREADY <= ap_const_logic_1;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_RREADY_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, ap_CS_fsm_pp3_stage8, ap_CS_fsm_pp3_stage9, ap_CS_fsm_pp3_stage18, ap_CS_fsm_pp3_stage19, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage7, exitcond_flatten3_reg_2202_pp3_iter1_reg, ap_block_pp3_stage8_11001, ap_block_pp3_stage9_11001, ap_block_pp3_stage18_11001, ap_block_pp3_stage19_11001, ap_block_pp3_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage7) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage19) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage18) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage8) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)))) then 
            gmem2_RREADY <= ap_const_logic_1;
        else 
            gmem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WDATA_assign_proc : process(tmp_65_reg_2319, ap_reg_ioackin_gmem2_WREADY, ap_condition_1143, ap_condition_1273)
    begin
        if ((ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_1273)) then 
                gmem2_WDATA <= tmp_65_reg_2319;
            elsif ((ap_const_boolean_1 = ap_condition_1143)) then 
                gmem2_WDATA <= ap_const_lv8_32;
            else 
                gmem2_WDATA <= "XXXXXXXX";
            end if;
        else 
            gmem2_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten_reg_2077_pp0_iter9_reg, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_CS_fsm_pp3_stage10, ap_block_pp0_stage0_01001, ap_reg_ioackin_gmem2_WREADY, ap_block_pp3_stage10_01001)
    begin
        if ((((ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage10_01001)) or ((ap_reg_ioackin_gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
            gmem2_WVALID <= ap_const_logic_1;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AR_assign_proc : process(m_axi_gmem2_ARREADY, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1, exitcond_flatten3_reg_2202, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, ap_CS_fsm_pp3_stage11, ap_block_pp3_stage11, ap_CS_fsm_pp3_stage12, ap_block_pp3_stage12, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage12) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage11) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)))) then 
            gmem2_blk_n_AR <= m_axi_gmem2_ARREADY;
        else 
            gmem2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, tmp_4_reg_2103, ap_CS_fsm_pp3_stage9, ap_block_pp3_stage9, ap_enable_reg_pp3_iter1, tmp_13_reg_2315)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage9) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (tmp_13_reg_2315 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_4_reg_2103 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, tmp_15_reg_2107_pp0_iter14_reg, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_CS_fsm_pp3_stage15, ap_block_pp3_stage15)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage15) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_15_reg_2107_pp0_iter14_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_R_assign_proc : process(m_axi_gmem2_RVALID, ap_enable_reg_pp3_iter0, exitcond_flatten3_reg_2202, ap_CS_fsm_pp3_stage8, ap_block_pp3_stage8, ap_CS_fsm_pp3_stage9, ap_block_pp3_stage9, ap_CS_fsm_pp3_stage18, ap_block_pp3_stage18, ap_CS_fsm_pp3_stage19, ap_block_pp3_stage19, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage7, ap_block_pp3_stage7, exitcond_flatten3_reg_2202_pp3_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage7) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond_flatten3_reg_2202_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage19) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage18) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage18) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage9) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage8) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_reg_2202 = ap_const_lv1_0)))) then 
            gmem2_blk_n_R <= m_axi_gmem2_RVALID;
        else 
            gmem2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, exitcond_flatten_reg_2077_pp0_iter9_reg, ap_enable_reg_pp3_iter1, tmp_13_reg_2315, ap_CS_fsm_pp3_stage10, ap_block_pp3_stage10)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage10) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (tmp_13_reg_2315 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_2077_pp0_iter9_reg = ap_const_lv1_0)))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state18, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_2111, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_2111)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_2111 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_2032_p0 <= grp_fu_2032_p00(4 - 1 downto 0);
    grp_fu_2032_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_mid2_v_v_reg_2125),15));
    grp_fu_2032_p1 <= ap_const_lv15_708(12 - 1 downto 0);
    grp_fu_2032_p2 <= grp_fu_2032_p20(11 - 1 downto 0);
    grp_fu_2032_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y1_mid2_reg_2120),15));
    grp_fu_2040_p0 <= ap_const_lv15_708(12 - 1 downto 0);
    grp_fu_2040_p1 <= grp_fu_2040_p10(4 - 1 downto 0);
    grp_fu_2040_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_mid2_v_v_reg_2160),15));
    grp_fu_2040_p2 <= grp_fu_2040_p20(11 - 1 downto 0);
    grp_fu_2040_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y2_mid2_reg_2155),15));
    grp_fu_2048_p0 <= grp_fu_2048_p00(4 - 1 downto 0);
    grp_fu_2048_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_mid2_v_v_reg_2228_pp3_iter1_reg),15));
    grp_fu_2048_p1 <= ap_const_lv15_708(12 - 1 downto 0);
    grp_fu_2048_p2 <= grp_fu_2048_p20(11 - 1 downto 0);
    grp_fu_2048_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y3_mid2_reg_2211_pp3_iter1_reg),15));

    grp_fu_623_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_623_ce <= ap_const_logic_1;
        else 
            grp_fu_623_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_623_p1 <= ap_const_lv5_3(3 - 1 downto 0);

    grp_fu_643_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_643_ce <= ap_const_logic_1;
        else 
            grp_fu_643_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_643_p1 <= ap_const_lv5_3(3 - 1 downto 0);
    indvar_flatten_next1_fu_666_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_401) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_fu_727_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_434) + unsigned(ap_const_lv15_1));
    indvar_flatten_next3_fu_1802_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten3_phi_fu_471_p4) + unsigned(ap_const_lv15_1));
    indvar_flatten_next_fu_548_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_371_p4) + unsigned(ap_const_lv5_1));
    knn_mat4_sum1_fu_1993_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_1989_p1) + unsigned(knn_mat_read_reg_2056));
    knn_mat4_sum5_fu_612_p2 <= std_logic_vector(unsigned(tmp_30_mid2_fu_600_p1) + unsigned(knn_mat_read_reg_2056));
    knn_mat4_sum6_fu_1874_p2 <= std_logic_vector(unsigned(tmp_5_mid2_fu_1862_p1) + unsigned(knn_mat_read_reg_2056));
    knn_mat4_sum7_fu_1898_p2 <= std_logic_vector(unsigned(tmp_23_1_mid2_fu_1894_p1) + unsigned(knn_mat_read_reg_2056));
    knn_mat4_sum8_fu_1930_p2 <= std_logic_vector(unsigned(tmp_21_2_cast_fu_1926_p1) + unsigned(knn_mat_read_reg_2056));
    knn_mat4_sum9_fu_1954_p2 <= std_logic_vector(unsigned(tmp_23_2_mid2_fu_1950_p1) + unsigned(knn_mat_read_reg_2056));
    p_max_id_1_cast1_fu_1916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_1_fu_1912_p2),33));
    p_max_id_1_cast_fu_1965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_1_reg_2261),2));
    p_max_id_2_cast_fu_1980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_max_id_2_fu_1972_p3),33));
    p_max_id_2_fu_1972_p3 <= 
        ap_const_lv2_2 when (tmp_24_2_fu_1968_p2(0) = '1') else 
        p_max_id_1_cast_fu_1965_p1;
    p_shl1_cast_fu_1786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1778_p3),7));
    p_shl1_cast_mid1_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_1832_p3),7));
    p_shl1_fu_1778_p3 <= (ap_phi_mux_x3_phi_fu_482_p4 & ap_const_lv2_0);
    p_shl1_mid1_fu_1832_p3 <= (x3_s_fu_1822_p2 & ap_const_lv2_0);
    p_shl_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_524_p3),7));
    p_shl_cast_mid1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_570_p3),7));
    p_shl_fu_524_p3 <= (x_reg_379 & ap_const_lv2_0);
    p_shl_mid1_fu_570_p3 <= (x_s_fu_560_p2 & ap_const_lv2_0);

    temp_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, tmp_9_fu_712_p1, tmp_6_fu_773_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_address0 <= tmp_6_fu_773_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            temp_address0 <= tmp_9_fu_712_p1(15 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage7, ap_block_pp3_stage7, temp_addr_1_reg_2176_pp2_iter3_reg, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, tmp_10_fu_2015_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage7) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            temp_address1 <= tmp_10_fu_2015_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_address1 <= temp_addr_1_reg_2176_pp2_iter3_reg;
        else 
            temp_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage7, ap_block_pp2_stage0_11001, ap_block_pp3_stage7_11001, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage7) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (test_image_read_reg_2066 xor gmem_addr_read_reg_2141);
    temp_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dis_1_s_fu_1763_p2),64));

    temp_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten1_reg_2111_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond_flatten1_reg_2111_pp1_iter1_reg = ap_const_lv1_0))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(ap_block_pp2_stage0_11001, exitcond_flatten2_reg_2146_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (exitcond_flatten2_reg_2146_pp2_iter3_reg = ap_const_lv1_0))) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_1403_p2 <= std_logic_vector(unsigned(tmp_15_7_cast_fu_865_p1) + unsigned(tmp_15_8_cast_fu_877_p1));
    tmp11_cast_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp11_fu_1425_p2),3));
    tmp11_fu_1425_p2 <= std_logic_vector(unsigned(tmp12_fu_1419_p2) + unsigned(tmp_15_9_cast_fu_889_p1));
    tmp12_fu_1419_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_901_p1) + unsigned(tmp_15_10_cast_fu_913_p1));
    tmp13_cast_fu_1734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp13_reg_2187),5));
    tmp13_fu_1535_p2 <= std_logic_vector(unsigned(tmp19_cast_fu_1531_p1) + unsigned(tmp14_cast_fu_1489_p1));
    tmp14_cast_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp14_fu_1483_p2),4));
    tmp14_fu_1483_p2 <= std_logic_vector(unsigned(tmp17_cast_fu_1479_p1) + unsigned(tmp15_cast_fu_1463_p1));
    tmp15_cast_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp15_fu_1457_p2),3));
    tmp15_fu_1457_p2 <= std_logic_vector(unsigned(tmp16_fu_1451_p2) + unsigned(tmp_15_11_cast_fu_925_p1));
    tmp16_fu_1451_p2 <= std_logic_vector(unsigned(tmp_15_12_cast_fu_937_p1) + unsigned(tmp_15_13_cast_fu_949_p1));
    tmp17_cast_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp17_fu_1473_p2),3));
    tmp17_fu_1473_p2 <= std_logic_vector(unsigned(tmp18_fu_1467_p2) + unsigned(tmp_15_14_cast_fu_961_p1));
    tmp18_fu_1467_p2 <= std_logic_vector(unsigned(tmp_15_15_cast_fu_973_p1) + unsigned(tmp_15_16_cast_fu_985_p1));
    tmp19_cast_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp19_fu_1525_p2),4));
    tmp19_fu_1525_p2 <= std_logic_vector(unsigned(tmp22_cast_fu_1521_p1) + unsigned(tmp20_cast_fu_1505_p1));
    tmp1_cast_fu_1743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_1737_p2),6));
    tmp1_fu_1737_p2 <= std_logic_vector(unsigned(tmp13_cast_fu_1734_p1) + unsigned(tmp2_cast_fu_1731_p1));
    tmp20_cast_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp20_fu_1499_p2),3));
    tmp20_fu_1499_p2 <= std_logic_vector(unsigned(tmp21_fu_1493_p2) + unsigned(tmp_15_17_cast_fu_997_p1));
    tmp21_fu_1493_p2 <= std_logic_vector(unsigned(tmp_15_18_cast_fu_1009_p1) + unsigned(tmp_15_19_cast_fu_1021_p1));
    tmp22_cast_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp22_fu_1515_p2),3));
    tmp22_fu_1515_p2 <= std_logic_vector(unsigned(tmp23_fu_1509_p2) + unsigned(tmp_15_20_cast_fu_1033_p1));
    tmp23_fu_1509_p2 <= std_logic_vector(unsigned(tmp_15_21_cast_fu_1045_p1) + unsigned(tmp_15_22_cast_fu_1057_p1));
    tmp24_cast_fu_1759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp24_fu_1753_p2),6));
    tmp24_fu_1753_p2 <= std_logic_vector(unsigned(tmp36_cast_fu_1750_p1) + unsigned(tmp25_cast_fu_1747_p1));
    tmp25_cast_fu_1747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp25_reg_2192),5));
    tmp25_fu_1625_p2 <= std_logic_vector(unsigned(tmp31_cast_fu_1621_p1) + unsigned(tmp26_cast_fu_1579_p1));
    tmp26_cast_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp26_fu_1573_p2),4));
    tmp26_fu_1573_p2 <= std_logic_vector(unsigned(tmp29_cast_fu_1569_p1) + unsigned(tmp27_cast_fu_1553_p1));
    tmp27_cast_fu_1553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp27_fu_1547_p2),3));
    tmp27_fu_1547_p2 <= std_logic_vector(unsigned(tmp28_fu_1541_p2) + unsigned(tmp_15_23_cast_fu_1069_p1));
    tmp28_fu_1541_p2 <= std_logic_vector(unsigned(tmp_15_24_cast_fu_1081_p1) + unsigned(tmp_15_25_cast_fu_1093_p1));
    tmp29_cast_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp29_fu_1563_p2),3));
    tmp29_fu_1563_p2 <= std_logic_vector(unsigned(tmp30_fu_1557_p2) + unsigned(tmp_15_26_cast_fu_1105_p1));
    tmp2_cast_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_2182),5));
    tmp2_fu_1445_p2 <= std_logic_vector(unsigned(tmp8_cast_fu_1441_p1) + unsigned(tmp3_cast_fu_1399_p1));
    tmp30_fu_1557_p2 <= std_logic_vector(unsigned(tmp_15_27_cast_fu_1117_p1) + unsigned(tmp_15_28_cast_fu_1129_p1));
    tmp31_cast_fu_1621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp31_fu_1615_p2),4));
    tmp31_fu_1615_p2 <= std_logic_vector(unsigned(tmp34_cast_fu_1611_p1) + unsigned(tmp32_cast_fu_1595_p1));
    tmp32_cast_fu_1595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp32_fu_1589_p2),3));
    tmp32_fu_1589_p2 <= std_logic_vector(unsigned(tmp33_fu_1583_p2) + unsigned(tmp_15_29_cast_fu_1141_p1));
    tmp33_fu_1583_p2 <= std_logic_vector(unsigned(tmp_15_30_cast_fu_1153_p1) + unsigned(tmp_15_31_cast_fu_1165_p1));
    tmp34_cast_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp34_fu_1605_p2),3));
    tmp34_fu_1605_p2 <= std_logic_vector(unsigned(tmp35_fu_1599_p2) + unsigned(tmp_15_32_cast_fu_1177_p1));
    tmp35_fu_1599_p2 <= std_logic_vector(unsigned(tmp_15_33_cast_fu_1189_p1) + unsigned(tmp_15_34_cast_fu_1201_p1));
    tmp36_cast_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp36_reg_2197),5));
    tmp36_fu_1725_p2 <= std_logic_vector(unsigned(tmp42_cast_fu_1721_p1) + unsigned(tmp37_cast_fu_1669_p1));
    tmp37_cast_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp37_fu_1663_p2),4));
    tmp37_fu_1663_p2 <= std_logic_vector(unsigned(tmp40_cast_fu_1659_p1) + unsigned(tmp38_cast_fu_1643_p1));
    tmp38_cast_fu_1643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp38_fu_1637_p2),3));
    tmp38_fu_1637_p2 <= std_logic_vector(unsigned(tmp39_fu_1631_p2) + unsigned(tmp_15_35_cast_fu_1213_p1));
    tmp39_fu_1631_p2 <= std_logic_vector(unsigned(tmp_15_36_cast_fu_1225_p1) + unsigned(tmp_15_37_cast_fu_1237_p1));
    tmp3_cast_fu_1399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_1393_p2),4));
    tmp3_fu_1393_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_1389_p1) + unsigned(tmp4_cast_fu_1373_p1));
    tmp40_cast_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp40_fu_1653_p2),3));
    tmp40_fu_1653_p2 <= std_logic_vector(unsigned(tmp41_fu_1647_p2) + unsigned(tmp_15_38_cast_fu_1249_p1));
    tmp41_fu_1647_p2 <= std_logic_vector(unsigned(tmp_15_39_cast_fu_1261_p1) + unsigned(tmp_15_40_cast_fu_1273_p1));
    tmp42_cast_fu_1721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp42_fu_1715_p2),4));
    tmp42_fu_1715_p2 <= std_logic_vector(unsigned(tmp45_fu_1709_p2) + unsigned(tmp43_cast_fu_1685_p1));
    tmp43_cast_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp43_fu_1679_p2),3));
    tmp43_fu_1679_p2 <= std_logic_vector(unsigned(tmp44_fu_1673_p2) + unsigned(tmp_15_41_cast_fu_1285_p1));
    tmp44_fu_1673_p2 <= std_logic_vector(unsigned(tmp_15_42_cast_fu_1297_p1) + unsigned(tmp_15_43_cast_fu_1309_p1));
    tmp45_fu_1709_p2 <= std_logic_vector(unsigned(tmp47_cast_fu_1705_p1) + unsigned(tmp46_cast_fu_1695_p1));
    tmp46_cast_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp46_fu_1689_p2),3));
    tmp46_fu_1689_p2 <= std_logic_vector(unsigned(tmp_15_44_cast_fu_1321_p1) + unsigned(tmp_15_45_cast_fu_1333_p1));
    tmp47_cast_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp47_fu_1699_p2),3));
    tmp47_fu_1699_p2 <= std_logic_vector(unsigned(tmp_15_46_cast_fu_1345_p1) + unsigned(tmp_15_47_cast_fu_1357_p1));
    tmp4_cast_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_1367_p2),3));
    tmp4_fu_1367_p2 <= std_logic_vector(unsigned(tmp5_fu_1361_p2) + unsigned(tmp_15_1_cast_fu_793_p1));
    tmp5_fu_1361_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_781_p1) + unsigned(tmp_15_2_cast_fu_805_p1));
    tmp6_cast_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_1383_p2),3));
    tmp6_fu_1383_p2 <= std_logic_vector(unsigned(tmp7_fu_1377_p2) + unsigned(tmp_15_3_cast_fu_817_p1));
    tmp7_fu_1377_p2 <= std_logic_vector(unsigned(tmp_15_4_cast_fu_829_p1) + unsigned(tmp_15_5_cast_fu_841_p1));
    tmp8_cast_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_1435_p2),4));
    tmp8_fu_1435_p2 <= std_logic_vector(unsigned(tmp11_cast_fu_1431_p1) + unsigned(tmp9_cast_fu_1415_p1));
    tmp9_cast_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_fu_1409_p2),3));
    tmp9_fu_1409_p2 <= std_logic_vector(unsigned(tmp10_fu_1403_p2) + unsigned(tmp_15_6_cast_fu_853_p1));
    tmp_10_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_2300),64));
    tmp_11_fu_1984_p2 <= std_logic_vector(unsigned(tmp_5_cast_mid2_reg_2256) + unsigned(p_max_id_2_cast_fu_1980_p1));
    tmp_12_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem2_addr_5_read_reg_2310),64));
    tmp_13_fu_2022_p2 <= "1" when (unsigned(temp_q1) < unsigned(tmp_12_fu_2019_p1)) else "0";
    tmp_15_10_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_905_p3),2));
    tmp_15_11_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_917_p3),2));
    tmp_15_12_cast_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_929_p3),2));
    tmp_15_13_cast_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_941_p3),2));
    tmp_15_14_cast_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_953_p3),2));
    tmp_15_15_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_965_p3),2));
    tmp_15_16_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_977_p3),2));
    tmp_15_17_cast_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_989_p3),2));
    tmp_15_18_cast_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1001_p3),2));
    tmp_15_19_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1013_p3),2));
    tmp_15_1_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_785_p3),2));
    tmp_15_20_cast_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1025_p3),2));
    tmp_15_21_cast_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_1037_p3),2));
    tmp_15_22_cast_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1049_p3),2));
    tmp_15_23_cast_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1061_p3),2));
    tmp_15_24_cast_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1073_p3),2));
    tmp_15_25_cast_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1085_p3),2));
    tmp_15_26_cast_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1097_p3),2));
    tmp_15_27_cast_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1109_p3),2));
    tmp_15_28_cast_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1121_p3),2));
    tmp_15_29_cast_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_1133_p3),2));
    tmp_15_2_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_797_p3),2));
    tmp_15_30_cast_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1145_p3),2));
    tmp_15_31_cast_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1157_p3),2));
    tmp_15_32_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1169_p3),2));
    tmp_15_33_cast_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1181_p3),2));
    tmp_15_34_cast_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1193_p3),2));
    tmp_15_35_cast_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1205_p3),2));
    tmp_15_36_cast_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1217_p3),2));
    tmp_15_37_cast_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1229_p3),2));
    tmp_15_38_cast_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1241_p3),2));
    tmp_15_39_cast_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_1253_p3),2));
    tmp_15_3_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_809_p3),2));
    tmp_15_40_cast_fu_1273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1265_p3),2));
    tmp_15_41_cast_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1277_p3),2));
    tmp_15_42_cast_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_1289_p3),2));
    tmp_15_43_cast_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_1301_p3),2));
    tmp_15_44_cast_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_1313_p3),2));
    tmp_15_45_cast_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_1325_p3),2));
    tmp_15_46_cast_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_1337_p3),2));
    tmp_15_47_cast_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_1349_p3),2));
    tmp_15_4_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_821_p3),2));
    tmp_15_5_cast_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_833_p3),2));
    tmp_15_6_cast_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_845_p3),2));
    tmp_15_7_cast_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_857_p3),2));
    tmp_15_8_cast_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_869_p3),2));
    tmp_15_9_cast_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_881_p3),2));
    tmp_15_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_893_p3),2));
    tmp_15_fu_654_p2 <= "1" when (grp_fu_643_p2 = ap_const_lv5_0) else "0";
    tmp_16_fu_777_p1 <= temp_q0(1 - 1 downto 0);
    tmp_17_fu_785_p3 <= temp_q0(1 downto 1);
    tmp_18_cast_fu_1989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1984_p2),64));
    tmp_18_fu_797_p3 <= temp_q0(2 downto 2);
    tmp_19_fu_809_p3 <= temp_q0(3 downto 3);
    tmp_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(train_images1_fu_500_p4),64));
    tmp_1_mid2_v_v_fu_692_p3 <= 
        x1_s_fu_686_p2 when (exitcond1_fu_672_p2(0) = '1') else 
        ap_phi_mux_x1_phi_fu_416_p4;
    tmp_20_fu_821_p3 <= temp_q0(4 downto 4);
    tmp_21_2_cast_fu_1926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_2_fu_1920_p2),64));
    tmp_21_2_fu_1920_p2 <= std_logic_vector(unsigned(p_max_id_1_cast1_fu_1916_p1) + unsigned(tmp_5_cast_mid2_fu_1909_p1));
    tmp_21_fu_833_p3 <= temp_q0(5 downto 5);
    tmp_22_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_777_p1),2));
    tmp_22_fu_845_p3 <= temp_q0(6 downto 6);
    tmp_23_1_mid2_fu_1894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_1_mid2_v_fu_1890_p1),64));
        tmp_23_1_mid2_v_fu_1890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_1_mid2_v_v_fu_1885_p2),32));

    tmp_23_1_mid2_v_v_fu_1885_p2 <= std_logic_vector(signed(tmp_5_mid2_v_v_reg_2217) + signed(ap_const_lv7_1));
    tmp_23_2_mid2_fu_1950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_2_mid2_v_fu_1946_p1),64));
        tmp_23_2_mid2_v_fu_1946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_2_mid2_v_v_fu_1941_p2),32));

    tmp_23_2_mid2_v_v_fu_1941_p2 <= std_logic_vector(signed(tmp_5_mid2_v_v_reg_2217) + signed(ap_const_lv7_2));
    tmp_23_fu_857_p3 <= temp_q0(7 downto 7);
    tmp_24_1_fu_1912_p2 <= "1" when (unsigned(gmem2_addr_1_read_reg_2246) < unsigned(gmem2_addr_2_read_reg_2251)) else "0";
    tmp_24_2_fu_1968_p2 <= "1" when (unsigned(gmem2_addr_3_read_reg_2278) < unsigned(gmem2_addr_4_read_reg_2283)) else "0";
    tmp_24_fu_869_p3 <= temp_q0(8 downto 8);
    tmp_25_fu_881_p3 <= temp_q0(9 downto 9);
    tmp_26_fu_893_p3 <= temp_q0(10 downto 10);
    tmp_27_fu_905_p3 <= temp_q0(11 downto 11);
    tmp_28_fu_917_p3 <= temp_q0(12 downto 12);
    tmp_29_fu_929_p3 <= temp_q0(13 downto 13);
    tmp_2_fu_1790_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_1786_p1) - unsigned(x3_cast1_fu_1774_p1));
    tmp_2_mid1_fu_1844_p2 <= std_logic_vector(unsigned(p_shl1_cast_mid1_fu_1840_p1) - unsigned(x3_cast1_mid1_fu_1828_p1));
    tmp_30_fu_941_p3 <= temp_q0(14 downto 14);
    tmp_30_mid2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_mid2_v_fu_596_p1),64));
        tmp_30_mid2_v_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid2_fu_588_p3),32));

    tmp_31_fu_953_p3 <= temp_q0(15 downto 15);
    tmp_32_fu_965_p3 <= temp_q0(16 downto 16);
    tmp_33_fu_977_p3 <= temp_q0(17 downto 17);
    tmp_34_fu_989_p3 <= temp_q0(18 downto 18);
    tmp_35_fu_1001_p3 <= temp_q0(19 downto 19);
    tmp_36_fu_1013_p3 <= temp_q0(20 downto 20);
    tmp_37_fu_1025_p3 <= temp_q0(21 downto 21);
    tmp_38_fu_1037_p3 <= temp_q0(22 downto 22);
    tmp_39_fu_1049_p3 <= temp_q0(23 downto 23);
    tmp_40_fu_1061_p3 <= temp_q0(24 downto 24);
    tmp_41_fu_1073_p3 <= temp_q0(25 downto 25);
    tmp_42_fu_1085_p3 <= temp_q0(26 downto 26);
    tmp_43_fu_1097_p3 <= temp_q0(27 downto 27);
    tmp_44_fu_1109_p3 <= temp_q0(28 downto 28);
    tmp_45_fu_1121_p3 <= temp_q0(29 downto 29);
    tmp_46_fu_1133_p3 <= temp_q0(30 downto 30);
    tmp_47_fu_1145_p3 <= temp_q0(31 downto 31);
    tmp_48_fu_1157_p3 <= temp_q0(32 downto 32);
    tmp_49_fu_1169_p3 <= temp_q0(33 downto 33);
    tmp_4_fu_648_p2 <= "1" when (grp_fu_623_p2 = ap_const_lv5_0) else "0";
    tmp_50_fu_1181_p3 <= temp_q0(34 downto 34);
    tmp_51_fu_1193_p3 <= temp_q0(35 downto 35);
    tmp_52_fu_1205_p3 <= temp_q0(36 downto 36);
    tmp_53_fu_1217_p3 <= temp_q0(37 downto 37);
    tmp_54_fu_1229_p3 <= temp_q0(38 downto 38);
    tmp_55_fu_1241_p3 <= temp_q0(39 downto 39);
    tmp_56_fu_1253_p3 <= temp_q0(40 downto 40);
    tmp_57_fu_1265_p3 <= temp_q0(41 downto 41);
    tmp_58_fu_1277_p3 <= temp_q0(42 downto 42);
    tmp_59_fu_1289_p3 <= temp_q0(43 downto 43);
    tmp_5_cast_mid2_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_mid2_v_reg_2223),33));
    tmp_5_mid2_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_mid2_v_fu_1858_p1),64));
        tmp_5_mid2_v_fu_1858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_mid2_v_v_fu_1850_p3),32));

    tmp_5_mid2_v_v_fu_1850_p3 <= 
        tmp_2_mid1_fu_1844_p2 when (exitcond3_fu_1808_p2(0) = '1') else 
        tmp_2_fu_1790_p2;
    tmp_60_fu_1301_p3 <= temp_q0(44 downto 44);
    tmp_61_fu_1313_p3 <= temp_q0(45 downto 45);
    tmp_62_fu_1325_p3 <= temp_q0(46 downto 46);
    tmp_63_fu_1337_p3 <= temp_q0(47 downto 47);
    tmp_64_fu_1349_p3 <= temp_q0(48 downto 48);
    tmp_65_fu_2028_p1 <= temp_q1(8 - 1 downto 0);
    tmp_6_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_2171),64));
    tmp_6_mid2_v_v_fu_753_p3 <= 
        x2_s_fu_747_p2 when (exitcond2_fu_733_p2(0) = '1') else 
        ap_phi_mux_x2_phi_fu_449_p4;
    tmp_7_mid2_v_v_fu_1866_p3 <= 
        x3_s_fu_1822_p2 when (exitcond3_fu_1808_p2(0) = '1') else 
        ap_phi_mux_x3_phi_fu_482_p4;
    tmp_9_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_2136),64));
    tmp_fu_536_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_532_p1) - unsigned(x_cast_fu_520_p1));
    tmp_mid1_fu_582_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_578_p1) - unsigned(x_cast_mid1_fu_566_p1));
    tmp_mid2_fu_588_p3 <= 
        tmp_mid1_fu_582_p2 when (exitcond_fu_554_p2(0) = '1') else 
        tmp_fu_536_p2;
    train_images1_fu_500_p4 <= train_images(63 downto 3);
    x1_s_fu_686_p2 <= std_logic_vector(unsigned(ap_phi_mux_x1_phi_fu_416_p4) + unsigned(ap_const_lv4_1));
    x2_s_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_x2_phi_fu_449_p4));
    x3_cast1_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x3_phi_fu_482_p4),7));
    x3_cast1_mid1_fu_1828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x3_s_fu_1822_p2),7));
    x3_s_fu_1822_p2 <= std_logic_vector(unsigned(ap_phi_mux_x3_phi_fu_482_p4) + unsigned(ap_const_lv4_1));
    x_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_379),7));
    x_cast_mid1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_s_fu_560_p2),7));
    x_mid2_fu_604_p3 <= 
        x_s_fu_560_p2 when (exitcond_fu_554_p2(0) = '1') else 
        x_reg_379;
    x_s_fu_560_p2 <= std_logic_vector(unsigned(x_reg_379) + unsigned(ap_const_lv4_1));
    y1_1_fu_700_p2 <= std_logic_vector(unsigned(y1_mid2_fu_678_p3) + unsigned(ap_const_lv11_1));
    y1_mid2_fu_678_p3 <= 
        ap_const_lv11_0 when (exitcond1_fu_672_p2(0) = '1') else 
        y1_reg_423;
    y2_1_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(y2_mid2_fu_739_p3));
    y2_mid2_fu_739_p3 <= 
        ap_const_lv11_0 when (exitcond2_fu_733_p2(0) = '1') else 
        y2_reg_456;
    y3_1_fu_2004_p2 <= std_logic_vector(unsigned(y3_mid2_reg_2211) + unsigned(ap_const_lv11_1));
    y3_mid2_fu_1814_p3 <= 
        ap_const_lv11_0 when (exitcond3_fu_1808_p2(0) = '1') else 
        ap_phi_mux_y3_phi_fu_493_p4;
    y_1_fu_635_p3 <= 
        ap_const_lv2_1 when (exitcond_fu_554_p2(0) = '1') else 
        y_op_fu_629_p2;
    y_op_fu_629_p2 <= std_logic_vector(unsigned(y_reg_390) + unsigned(ap_const_lv2_1));
end behav;
